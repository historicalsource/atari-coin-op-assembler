.SV C
!THE CONDITIONAL VARIABLES ARE DEFINED AS FOLLOWS:
!A=MAC65
!B=MAC68
!C=MAC69
!D=MAC65 OR MAC68
!E=MAC68 OR MAC69
.IF A;.T ^^MAC65\\
.EC;.IF B;.T ^^MAC68\\
.EC;.IF C;.T ^^MAC69\\
.EC
.IF A;.SV D;.EC;.IF B;.SV D;.EC
.IF B;.SV E;.EC;.IF C;.SV E;.EC
.ST ^ADDRESSING ^MODES
.DATE
.PS 60,74;.LM 13;.NF;.UC
.LM 0;.S 6;.F
.IF A;.C
ATARI MAC65 VM03.X
.S;.C
PDP-11\\ ^CROSS ^ASSEMBLER FOR ^^MOS 650X M\\ICROPROCESSOR
.EC;.IF B;.C
ATARI MAC68 VM03.XX
.C
PDP-11\\ ^CROSS ^ASSEMBLER FOR ^^MOTOROLA 6800 M\\ICROPROCESSOR
.EC;.IF C;.C
ATARI MAC69 VM03.XX
.C
PDP-11\\ ^CROSS ^ASSEMBLER FOR ^^MOTOROLA 6809 M\\ICROPROCESSOR
.EC
.S;.C
^AUTHOR: ^DAVE ^SHEPPERD
.S 3;.C
^ATARI, ^INC.
.C
1272 ^BORREGAS ^AVE.
.C
^SUNNYVALE, ^CALIF., 94086
.IF D;.S 3;.C
^CREATION ^DATE: ^NOVEMBER 1976
.S;.C
^UPDATED ^AUG 1979
.EC;.IF C;.S 3;.C
^CREATION ^DATE: ^AUG 1979
.EC
.S 6;.LM 10;.RM 64
^THIS PROGRAM IS THE RESULT OF EXTENSIVE MODIFICATION OF THE ^^RT-11\\
SYSTEM PROGRAM ^^MACRO\\. ^SECTIONS OF THIS MANUAL ARE TO EITHER
REPLACE OR SUPPLIMENT THE CORRESPONDING SECTION IN CHAPTER 5 OF THE
^^RT-11 SYSTEM REFERENCE MANUAL\\.
.S
^THE USER SHOULD NOTE THAT NO ADDRESS BOUNDARY RESTRICTIONS EXIST IN THIS
ASSEMBLER AND THROUGHOUT CHAPTER 5 AND THIS PUBLICATION ANY REFERENCE TO
A 'WORD' REFERS TO A DOUBLE BYTE QUANTITY.
^AS REQUIRED BY THE
.IF A
650^X MICROPROCESSORS THE 'WORD' QUANTITIES ARE PLACED
IN THE OBJECT CODE 'LEAST SIGNIFICANT BYTE' FIRST FOLLOWED BY THE 'MOST
SIGNIFICANT BYTE'.
.EC
.IF E
.IF B
6800
.EC;.IF C
6809
.EC
MICROPROCESSORS, ALL 'WORD' QUANTITIES ARE PLACED IN THE OBJECT CODE
'MOST SIGNIFICANT BYTE' FIRST FOLLOWED BY THE 'LEAST SIGNIFICANT BYTE'.
.EC
.PG
.LM 6;.RM 74;.P -6
^&^^5.2.1 CHARACTER SET\&\\
.S
^PLEASE APPEND THE FOLLOWING TO SECTION 5.2.1:
.BR;.TS 10,26;.LM 26;.P -20
?	QUESTION#MARK	LOGICAL EXCLUSIVE ^O^R OPERATOR
.S;.LM 6;.P -6
^&^^5.2.1.3 OPERATOR CHARACTERS\&\\
.S
^PLEASE APPEND TO THE SECTION UNDER ^^LEGAL BINARY OPERATORS\\ THE FOLLOWING:
.S;.TS 12,40
?	LOGICAL EXCLUSIVE ^O^R	^A##^B
.P
^&^^5.4#ADDRESSING#MODES\&\\
.BR
^ADDRESSING MODES TO
.UC;.IF A
MAC65
.EC;.IF B
MAC68
.EC;.IF C
MAC69
.EC;.LC;.TS
CAN BE REPRESENTED EITHER AS A SEPARATE OPERAND
 OR BY CHARACTERS
 PREFIXED AND/OR SUFFIXED TO A SINGLE OPERAND.
  ^IF THE ADDRESS MODE IS EXPRESSED AS A SEPARATE OPERAND THEN THIS
 OPERAND MUST BE THE FIRST OF 2 FOR THE INSTRUCTION.
 ^THE ALLOWABLE ADDRESS MODE OPERANDS AND THEIR MEANING ARE AS FOLLOWS:
.S 1;.NF;.IF A
^I - IMMEDIATE (1 BYTE DATA)
.EC;.IF E
^I - IMMEDIATE (1 OR 2 BYTES OF DATA)
.EC
.IF D
^Z - ZERO PAGE ADDRESSING (1 BYTE ADDRESS)
.EC;.IF E
^D - DIRECT ADDRESSING	(1 BYTE ADDRESS)
.EC;.IF D
^A - ABSOLUTE ADDRESSING  (2 BYTE ADDRESS)
.EC
.IF A
^^NX\\ - INDEXED BY ^X, INDIRECT (1 BYTE OFFSET)
^^NY\\ - INDIRECT, INDEXED BY ^Y (1 BYTE OFFSET)
^^ZX\\ - ZERO PAGE ADDRESSING INDEXED BY ^X (1 BYTE OFFSET)
^X - SAME AS ABOVE
^^ZY\\ - ZERO PAGE ADDRESSING INDEXED BY ^Y (1 BYTE OFFSET)
^Y - SAME AS ABOVE
^^AX\\ - ABSOLUTE INDEXED BY ^X (2 BYTE OFFSET)
^^AY\\ - ABSOLUTE INDEXED BY ^Y (2 BYTE OFFSET)
^N - ABSOLUTE INDIRECT (2 BYTE OFFSET)
^NO OPERAND AT ALL IS ACCUMULATOR ADDRESSING.
.EC;.IF E
^E - EXTENDED ADDRESSING  (2 BYTE ADDRESS)
.EC;.IF B
^X - INDEXED ADDRESSING   (1 BYTE OFFSET)
.EC;.IF C
^N^E - INDIRECT EXTENDED  (2 BYTE ADDRESS OF ADDRESS)
5 - FORCE 5 BIT OFFSET
8 - FORCE 8 BIT OFFSET    (NO DECIMAL POINT!)
.F;.S;.LC
^THE 5 AND 8 MUST ^N^O^T BE SUFFIXED WITH A DECIMAL POINT AND ARE USED IN
CONJUNCTION WITH ONE OF THE FOLLOWING INDEX MODE INDICATIONS.
.S
^M^A^C69 ALWAYS ASSUMES ^P^C RELATIVE IF NONE OF THE ABOVE ADDRESS MODES OR
NONE OF THE INDEX MODE CHARACTERS ARE GIVEN.
.S
^THE INDEXED ADDRESS MODES ARE INDICATED BY THE FOLLOWING:
.S;.NF;.TS 18
NULL	;^INHERENT MODE (I.E. ^A^B^X)
LABEL	;^P^C RELATIVE [I.E. LABEL-.(^P^C)]
@_#LABEL	;^EXTENDED (I.E. SAME AS ^E,LABEL)
_#DATA	;^IMMEDIATE MODE
(R)	;^REGISTER INDIRECT (0 OFFSET)
@(R)	;^INDIRECT REGISTER INDIRECT
(R)+	;^REGISTER INDIRECT, AUTO-INCREMENT BY 1
(R)++	;^REGISTER INDIRECT, AUTO-INCREMENT BY 2
@(R)++	;^INDIRECT REGISTER INDIRECT, AUTO-INCREMENT BY 2
@(R)+	;^SAME AS ABOVE (NO INC BY 1 ON INDIRECT)
N(R)	;^REGISTER INDEXED. (I.E. ^E^A = N+R WHERE:
	;	N=>ACCUMULATOR ^A, ^B OR ^D OR
	;	N=>ANY OTHER EXPRESSION)
@N(R)	;^REGISTER INDEXED, INDIRECT. (I.E. ^E^A = (N+R) WHERE:
	;	N=>ACCUMULATOR ^A, ^B OR ^D OR
	;	N=>ANY OTHER EXPRESSION)
.PG
-(R)	;^AUTO-DECREMENT BY 1, REGISTER INDIRECT
--(R)	;^AUTO-DECREMENT BY 2, REGISTER INDIRECT
@--(R)	;^AUTO-DECREMENT BY 2, INDIRECT REGISTER INDIRECT
@-(R)	;^SAME AS ABOVE. (NO DEC BY 1 INDIRECT)
.S;.F
'R' IN THE ABOVE EXAMPLES MAY BE ^^PC,X,Y,U\\ OR ^S (OR EQUIVALENT).
.S
^THE REGISTER SYMBOLS ^^CCR,A,B,DPR,X,Y,S,U,PC\\ AND ^D ARE PERMANENTLY
INSTALLED IN THE SYMBOL TABLE. ^THE USER MAY DEFINE ANY SYMBOL TO BE A
REGISTER BY EQUATING IT TO THE CORRESPONDING PERMANENT SYMBOL. ^I.E.:
.S
^^ACCUMA=A\\	;^DEFINE LABEL ^^'ACCUMA'\\ TO BE THE SAME AS ^A.
.EC
.S;.F
.IF D
^THE ALLOWABLE CHARACTERS FOR THE PREFIX/SUFFIX ADDRESS MODE
ARE DESCRIBED BELOW:
.S 1;.NF
_# - PREFIXED INDICATES IMMEDIATE MODE
.IF A
^@ - PREFIXED INDICATES INDIRECT
(^X) - SUFFIXED INDICATES INDEXED BY X
(^Y) - SUFFIXED INDICATES INDEXED BY Y
.EC;.IF B
(^X) - SUFFIXED INDICATES INDEXED
.EC
.S 1
.X ^^ADDRESSING MODES\\
.X ^I,IMMEDIATE ADDRESSING
.X ^Z,ZERO PAGE ADDRESSING
.X ^A,ABSOLUTE ADDRESSING
.IF A
.X ^N^X,INDIRECT ADDRESSING
.X ^N^Y,INDIRECT ADDRESSING
.X ^Z^X,ZERO PAGE INDEXED ADDRESSING
.EC
.X ^X,INDEXED ADDRESSING
.IF A
.X ^Z^Y,ZERO PAGE INDEXED ADDRESSING
.X ^Y,INDEXED ADDRESSING
.X ^A^X,ABSOLUTE INDEXED ADDRESSING
.X ^A^Y,ABSOLUTE INDEXED ADDRESSING
.X ^N,INDIRECT ADDRESSING
.EC
.X ^IMMEDIATE ADDRESSING
.X ^INDIRECT ADDRESSING
.X ^INDEXED ADDRESSING
.X ^ACCUMULATOR ADDRESSING
.X ^ZERO PAGE ADDRESSING
.X ^ABSOLUTE ADDRESSING
.EC
^EXAMPLES:
.TS 18
.IF A
^^LDA I,R0	;A IS LOADED WITH VALUE 'R0'
LDA _#R0		;SAME AS ABOVE
LDA Z,R0	;A IS LOADED WITH CONTENTS OF LOCATION 'R0'
	;(BUT 1 BYTE ADDRESS)
LDA A,R0	;SAME AS ABOVE, EXCEPT A 2 BYTE ADDRESS
	;IS SUPPLIED
LDA NX,R0	;X IS ADDED TO THE VALUE OF 'R0' TO OBTAIN
	;AN ADDRESS IN PAGE 0 OF THE LOW ORDER
	;BYTE OF A 2 BYTE ADDRESS. 'A' IS LOADED
	;WITH THE CONTENTS OF THE LOCATION POINTED
	;TO BY THIS ADDRESS.
LDA ^@R0(X)	;EXACTLY THE SAME AS ABOVE
LDA NY,R0	;THE VALUE 'R0' POINTS TO THE LOW BYTE OF A 
	;2 BYTE ADDRESS IN PAGE ZERO.
	;THE CONTENTS OF Y ARE ADDED TO
	;THIS BYTE TO OBTAIN THE LOW BYTE OF AN 
	;EFFECTIVE ADDRESS.  THE CARRY FROM THE ADD IS
	;ADDED TO THE LOCATION 'R0+1' TO OBTAIN THE
	;HIGH BYTE OF THE EFFECTIVE ADDRESS.  'A' IS LOADED
	;WITH THE CONTENTS OF MEMORY POINTED TO BY
	;THIS EFFECTIVE ADDRESS.  (NOTE; LOCATIONS R0 AND
	;R0+1 ARE NOT MODIFIED)
LDA ^@R0(Y)	;EXACTLY THE SAME AS ABOVE.
LDA ZX,R0	;ADD X TO THE VALUE 'R0' TO GET THE ADDRESS
	;OF A CELL IN PAGE 0.  'A' IS LOADED WITH
	;THE CONTENTS OF THIS CELL.
LDA R0(X)	;SAME AS ABOVE
LDA X,R0	;SAME AS ABOVE IF .DSABL AMA
	;IS IN EFFECT ELSE SEE DISCUSSION UNDER
	;'ALTERNATE DEFAULT ADDRESS MODES'
LDX ZY,R0	;ADD Y TO THE VALUE 'R0' TO GET THE ADDRESS
	;OF A CELL IN PAGE 0.  'X' IS LOADED WITH
	;THE CONTENTS OF THIS CELL
LDX R0(Y)	;SAME AS ABOVE
LDX Y,R0	;SAME AS ABOVE IF .DSABL AMA IS
	;IN EFFECT ELSE SEE DISCUSSION UNDER
	;'ALTERNATE DEFAULT ADDRESS MODES'
LDA AX,R0	;ADD X TO THE 2 BYTE VALUE 'R0' TO OBTAIN
	;THE EFFECTIVE ADDRESS.
LDA AY,R0	;ADD Y TO THE 2 BYTE VALUE 'R0' TO OBTAIN
	;THE EFFECTIVE ADDRESS
JMP N,LABEL	;GET THE EFFECTIVE ADDRESS FROM THE LOCATIONS
	;LABEL,LABEL+1
JMP ^@LABEL	;SAME AS ABOVE
.EC
.IF B
LDAA _#R0	;A IS LOADED WITH VALUE OF 'R0'
		;(1 BYTE)
LDX _#R0	;X IS LOADED WITH VALUE OF 'R0'
		;(2 BYTES)
LDAA Z,R0	;A IS LOADED WITH CONTENTS OF R0
		;(1 BYTE ADDR)
LDAA D,R0	;SAME AS ABOVE
LDAA E,R0	;A IS LOADED WITH CONTENTS OF R0
		;(2 BYTE ADDR)
LDAA A,R0	;SAME AS ABOVE
LDAA R0(X)	;ADD VALUE OF 'R0' AND X TO GET EFFECTIVE ADDRESS
LDAA X,R0	;SAME AS ABOVE
.EC
.IF C
.UC;.NF;.TS 18
ABX	;SOME OP CODES REQUIRE NO OPERANDS
ADC LABL	;PC RELATIVE
ADC D,LABL	;DIRECT PAGE
ADC E,LABL	;EXTENDED
ADC @_#LABL	;EXTENDED (INDIRECT IMMEDIATE)
ADC _#LABL	;IMMEDIATE
ADC 8,LABL	;PC RELATIVE. FORCE TO 8 BIT OFFSET
ADC 5,LABL(X)	;INDEXED OFF X. FORCE TO 5 BIT OFFSET
ADC LABL(X)	;INDEXED OFF X. ASSEMBLER WILL ALLOCATE
	;MINIMUM BITS FOR OFFSET.
ADC (X)+	;INDIRECT X AUTO INC
ADC @(S)++	;INDIRECT INDIRECT AUTO-INC
ADC A(U)	;ACCUM A INDEXED OFF U.
ADC 100(U)	;NUMERIC OFFSET OFF U
ADC <LABL+5>*6-1(S)	;ANY EXPRESSION IS GOOD FOR OFFSET
.S
ANDCC VALUE	;THIS ASSEMBLES AS ANDCC _#VALUE
ANDCC _#VALUE	;THE '_#' IS OPTIONAL SINCE ANDCC
	;ONLY HAS IMMEDIATE MODE
.S
PSHS A		;PSHS/PULS/PSHU/PULU REQUIRE A LIST OF FROM
PSHS A,B,X,Y	;0-8 REGISTERS AS OPERANDS
SOME=A+B+X+Y+DPR  ;ALSO,USER MAY DEFINE A SYMBOL
	;POINTING TO 1 OR MORE REGISTERS.
PSHS SOME	;EQUIVALENT TO PSH A,B,X,Y,DPR
.S
TFR SRC,DST	;TFR REQUIRES 2 REGISTER OPERANDS
	;BOTH REGISTERS MUST BE THE SAME SIZE
	;OR AN ERROR IS GENERATED.
.S;.F;.LC
^NOTE: ^THE ASSEMBLER WILL ALLOCATE THE MINIMUM NUMBER OF
BITS FOR OFFSETS IN INEXED MODE. ^HOWEVER, ALL FORWARD
REFERENCES ARE RESOLVED TO 16 BITS UNLESS FORCED OTHERWISE.
^THE USER MAY ^^.ENABL#WRN\\ TO FORCE THE ASSEMBLER TO FLAG THE
STATEMENTS WHERE FORWARD REFERENCES RESULT IN OFFSETS THAT WILL
FIT IN 8 OR 5 BITS.
.EC
.IF D
.S;.F;.P
^&^^5.4.1#DEFAULT#ADDRESS#MODES\&\\
.BR
^IF THE ADDRESSING MODE SPECIFICATION IS OMITTED, THE ASSEMBLER WILL
 ASSUME ^^ZERO PAGE\\ FOR ALL INSTRUCTIONS FOR WHICH A ^Z PAGE ADDRESS IS
 LEGAL OTHERWISE IT WILL ASSUME ^^ABSOLUTE\\.
^E.G.:
.S 1;.NF
.IF A
^^LDA R0	;ASSUMES LDA Z,R0
JMP LABEL	;ASSUMES JMP A,LABEL
	;    (JMP Z,LABEL IS ILLEGAL)
.EC;.IF B
^^LDAA R0	;ASSUMES LDAA D,R0
ASL R0		;ASSUMES ASL E,R0
		;(ASL Z,R0 IS ILLEGAL)
.EC
.S;.F;.P
^&^^5.4.2#ALTERNATE#DEFAULT#ADDRESS#MODES\&\\
.BR
^IF ^^.ENABL AMA\\ IS IN EFFECT (SEE SECTION 5.5.2 FOR DESCRIPTION OF
 ^^ .ENABL AMA\\ FUNCTION) AND EITHER NO ADDRESS MODE
OR MODES ^X, ^Y, (^X) OR (^Y)  IS INDICATED,
 THE ASSEMBLER WILL RESOLVE FROM THE VALUE OF THE OPERAND WHETHER TO
 ALLOCATE 1 OR 2 BYTES FOR THE OPERAND OBJECT CODE.
 ^^ONE MUST ^&NEVER\& 
 MAKE FORWARD REFERENCES TO PAGE ZERO ^&DEFINITIONS\& 
WHEN UTILIZING THIS FEATURE.\\ ^SEE TO IT THAT ALL SYMBOLS THAT ARE
 TO REPRESENT PAGE ZERO LOCATIONS ARE DEFINED PRIOR TO THEIR USAGE.
  ^THE ASSEMBLER WILL ALWAYS ALLOCATE 2 BYTES FOR SYMBOLS THAT ARE UNDEFINED,
 RELOCATABLE OR EXTERNAL (GLOBAL) UNLESS THE SYMBOL IS DEFINED IN A ^^.BSECT\\
(SEE SECTION 5.5.9) OR DECLARED IN A ^^.GLOBB\\ DIRECTIVE (SEE SECTION 5.5.10)
 IN WHICH CASE IT WILL ALWAYS ALLOCATE 1 BYTE.
.BR
^E.G.:
.S 2;.NF;.UC
^.ENABL AMA	;TURN ON ALTERNATE ADDRESS MODE ENABLE
SYM=100.
LDA SYM	;ASSEMBLES AS LDA Z,SYM
SYM=1000.
.IF A
LDA SYM	;ASSEMBLES AS LDA A,SYM
.EC;.IF B
LDAA SYM	;ASSEMBLES AS LDAA Z,SYM
.EC
.S
.IF A
LDA LAB	;THIS IS AN ERROR BECAUSE DURING PASS 1
.EC;.IF B
LDAA LAB	;THIS IS AN ERROR BECAUSE DURING PASS 1
.EC
LAB=10	;'LAB' IS UNDEFINED WHEN THE STATEMENT
	;'LDA LAB' IS ENCOUNTERED THEREFORE THE ASSEMBLER
	;WILL ALLOCATE 2 BYTES FOR THE ADDRESS.
	;DURING PASS 2 'LAB' IS FOUND
	;TO FIT INTO 1 BYTE SO 1 BYTE IS ALLOCATED
	;FOR THE ADDRESS.  FOR THIS REASON 'P' ERRORS
	;WILL OCCUR ON ALL SUBSEQUENT LABELS.
.S
LAB1=LAB2
LAB2=10
.IF A
LDA LAB1	;ERROR . SEE ABOVE
.EC;.IF B
LDAA LAB1	;ERROR. SEE ABOVE
.EC
.S 2
^.GLOBB LAB,LAB1	;THIS STATEMENT WILL CORRECT THE ERRORS
	;IN THE ABOVE EXAMPLES IF IT APPEARS
	;BEFORE THEY DO.
.S
.IF A
TABL=100.
LDA X,TABL	;ASSEMBLES AS LDA ZX,TABL
LDA TABL(X)	;ASSEMBLES AS LDA ZX,TABL
TABL=1000.
LDA X,TABL	;ASSEMBLES AS LDA AX,TABL
LDA TABL(X)	;ASSEMBLES AS LDA AX,TABL
.S
LDA -8	;-8=0FFF8 WHICH IS A VALID MEMORY
.EC;.IF B
LDAA -8		;-8=0FFF8 WHICH IS A VALID MEMORY
.EC
	;ADDRESS. THEREFORE THIS STATEMENT
.IF A
	;IS ASSEMBLED AS LDA A,FFF8
.EC;.IF B
	;IS ASSEMBLED AS LDAA E,0FFF8
.EC
.S
R0=0
.IF A
LDA R0-8	;SAME AS ABOVE
.EC;.IF B
LDAA R0-8	;SAME AS ABOVE
.EC
.S
^.BSECT
R0:
^.CSECT
.IF A
LDA R0-8	;THIS WILL ASSEMBLE LDA Z,R0-8
.EC;.IF B
LDAA R0-8	;THIS WILL ASSEMBLER AS LDAA D,R0-8
.EC;.EC
.BR;.PG;.F;.UC;.P -6
^&5.4.3#BRANCH#INSTRUCTION#ADDRESSING\&\\
.BR
.IF C;.S
^^SHORT BRANCHES:\\
.S;.EC
 ^THE ^^MPU\\ CAN
.IF C
SHORT
.EC
 BRANCH FORWARD 129 BYTES FROM THE LOCATION OF
 THE BRANCH INSTRUCTION OR 126 BYTES BACK FROM THE LOCATION OF
 THE INSTRUCTION.  ^IT IS ILLEGAL TO BRANCH TO A LABEL THAT IS NOT
DEFINED IN THE SAME SECTION (^^.ASECT,.CSECT OR .BSECT\\) AS THE BRANCH
 INSTRUCTION. ^ALL ILLEGAL BRANCHES ARE SET TO BRANCH TO ITSELF.
  ^THE '.' INDICATES THE LOCATION OF THE OPCODE BYTE
 OF THE BRANCH INSTRUCTION. ^E.G.:
.X ^BRANCH INSTRUCTIONS
.S;.NF
^^LAB1:
BCS LAB1		;LEGAL
 .
 .
 .
DEX
BNE .-1			;LEGAL (BRANCHES TO 'DEX')
 .
 .
 .
^.CSECT ONE
ONE:
^.CSECT TWO
BCC ONE	;ILLEGAL
.BR;.LC;.F
.IF C
.S
^^LONG BRANCHES:\\
.S
^THERE ARE NO RESTRICTONS ON WHERE A LONG
BRANCH MAY BE TAKEN.
.EC
.ST ^DIRECTIVES
.PG;.F;.S;.UC
^&LISTING#CONTROL#DIRECTIVES\&\\
.X ^^NLIST\\,LISTING CONTROL
.X ^^LIST\\,LISTING CONTROL
.X ^^BYT\\,LISTING CONTROL
.S
^PLEASE REPLACE SECTION 5.5.1 WITH THE FOLLOWING.
.TS;.UC;.P
^&5.5.1.1	.LIST AND .NLIST\&\\
.BR
^THE PROGRAM LISTING MAY BE SELECTIVELY CONTROLLED
BY WAY OF THE ^^.LIST\\ AND ^^.NLIST\\ DIRECTIVES.  ^THE EXTENT OF THE CONTROL
IS SUCH THAT ASPECTS OF THE PROGRAM LISTING MAY BE OMITTED, RE-DEFINED
OR REFORMATTED.
.S
^THE FORM OF THESE DIRECTIVES IS AS FOLLOWS:
.S
 ^^.LIST\\ ARG1[(PARAMETERS)],[ARG2[(PARAMETERS)]...,ARGN[(PARAMETERS)]]
.S
 ^^.NLIST\\ ARG1[,ARG2,...,ARGN]
.S
WHERE '[]' INDICATES OPTIONAL DATA; 'ARG' REPRESENTS ONE OF 16 KEYWORDS
OR A NULL AND 'PARAMETERS' IS A LIST OF FROM 1 TO 6 EXPRESSIONS THAT
INDICATE A FORMAT SPECIFICATION TO APPLY TO THE 'ARG'.
.S
^IN ADDITION, EACH OCCURANCE OF AN 'ARG' ALTERS A LIST CONTROL COUNT
ASSOCIATED WITH IT.  ^A ^^.LIST\\ INCREMENTS THE COUNT AND A ^^.NLIST\\ DECREMENTS
THE COUNT.  ^AS LONG AS THE COUNT IS LESS THAN 0, THE LISTING (OR THE
ASPECT) IS SUPPRESSED.
.S
^THE FOLLOWING ARE THE ALLOWABLE ARGUMENTS TO THE ^^.LIST/.NLIST\\ DIRECTIVES.
^THESE ARGUMENTS CAN HAVE NO PARAMETERS.
.TS 18,38;.LM 35;.P -27;.UC
^&ARGUMENT	DEFAULT SETTING	ASPECT\&
.TS 22,35;.LC;.I -24
^^MD	LIST\\	&^MACRO &^DEFINITIONS
.P -24
^^MC	LIST\\	&^MACRO &^CALLS
.P
^^ME	NLIST\\	^ALL STATEMENTS IN &^MACRO &^EXPANSIONS
.P
^^MEB	NLIST\\	^STATEMENTS IN A &^MACRO
&^EXPANSION THAT GENERATE
OBJECT CODE. (&^BINARY)
.P
^^BYT	LIST\\	^THE SOURCE PORTION OF
		MACRO EXPANSIONS
.P
^^CND	LIST\\	^UNSATISFIED &^CO&^N&^DITIONALS
.P
^^LD	LIST\\	&^LISTING CONTROL &^DIRECTIVES
.P
^^TOC	LIST\\	&^TABLE &^OF &^CONTENTS
.P
^^TTM	NLIST\\	^TERMINAL (&^T&^T^)&^MODE
.P
^^SYM	LIST	&S&Y&M\\BOL TABLE
.P
^^BEX	LIST	&B\\INARY &^E&^XPANSIONS. ^IF ALL THE BINARY OBJECT CANNOT
BE LISTED ON 1 LINE, IT WILL BE PRINTED ON THE NEXT IF THIS IS ENABLED.
.LM 6;.P 0
^THE FOLLOWING ARE IN ADDITION TO THE ABOVE BUT AN OPTIONAL SET OF PARAMETERS
MAY BE SUPPLIED.  ^A PARAMETER MAY BE ANY LEGAL ASSEMBLER EXPRESSION BUT IT
MUST RESOLVE TO AN ABSOLUTE QUANTITY AT THE TIME IT IS ASSEMBLED (I.E. NO
UNDEFINED, RELOCATABLE OR GLOBAL QUANTITIES).
^IF A PARAMETER IS NOT SUPPLIED, IT IS ASSUMED TO BE 0. ^IN THE FOLLOWING TABLE EACH
ITEM IN THE PARAMETER LIST IS IDENTIFIED WITH A NAME.
^IF THE ENTIRE PARAMETER LIST IS OMMITTED THEN
ONLY THE LISTING CONTROL COUNT IS MODIFIED AND
ANY PREVIOUSLY SET PARAMETERS WILL REMAIN 
UNMODIFIED.
 ^THE DEFINITION OF THE
NAMES IS AS FOLLOWS:
.LM 13;.P -5
ID#-#BINARY FIELD IDENTIFIER. ^EXPANDED BINARY CODE (OBJECT CODE) IS
PLACED ON THE PRINT LINE ACCORDING TO A BINARY FIELD DESCRIPTOR. ^THE
ASSEMBLER OBTAINS INSTRUCTIONS ON HOW AND WHERE TO LIST THE EXPANDED
BINARY FROM A QUE OF 'BINARY FIELD DESCRIPTOR RECORDS'. ^THE ASSEMBLER
BEGINS AT ^I^D 0 AND LISTS THE FIRST ITEM OF OBJECT CODE ACCORDING
TO THE CONTROLS IN ^I^D RECORD 0. ^IT PROCEEDS LISTING EACH SUCCESSIVE
ITEM IN THE OBJECT CODE ACCORDING TO EACH SUCCESSIVELY HIGHER ^I^D
DESCRIPTOR UNTIL EITHER NO MORE ^I^D'S ARE IN THE QUE OR THERE IS NO
MORE OBJECT CODE.
.P
LOC#-#^LOCATION ON THE PRINT LINE TO PUT DATA (POINTS TO LEFT MOST POSITION
EVEN THOUGH NUMBERS WILL BE RIGHT JUSTIFIED). ^MUST BE IN THE RANGE
1-132 INCLUSIVE.
.P
QUE#-#^IF &N&O&T 0, APPLY PARAMETERS TO THE &N&E&X&T LINE ^&PRINTED\&.
.P
LNTH#-#^LENGTH OF FIELD. ^MUST BE IN RANGE 0-8 INCLUSIVE.
^A 0 LENGTH INSTRUCTS THE ASSEMBLER TO AUTO-MATICALLY PICK A LENGTH
ACCORDING TO THE RADIX (I.E. RADIX LESS THAN 10 ALLOCATES 6 CHARACTERS,
RADIX=10 ALLOCATES 5 CHARACTERS, RADIX GREATER THAN 10 ALLOCATES 4
CHARACTERS) AND BYTE QUANTITIES ARE BLANK FILLED, TO THE LEFT OF THE MOST
SIGNIFICANT DIGIT.
.P
RDX#-#^NUMBER IS PRINTED ACCORDING TO THIS RADIX. ^MUST BE IN THE RANGE 2-16
INCLUSIVE. (^WILL PRINT 6 CHARACTERS MAXIMUM). ^DEFAULTS TO 16 IF
NOT SUPPLIED.
.P
LZS#-#^IF &N&O&T 0 WILL SUPPRESS PRINTING LEADING ZEROES
(BLANK FILLS TO THE LEFT).
.P
SGN#-#^IF &N&O&T 0 AND 'LZS' &N&O&T 0\\, WILL PRINT NUMBER AS SIGNED
QUANTITY (MAY BECOME 7TH CHARACTER OF A MAXIMUM 6 CHARACTER STRING)
.P
^^NOTE:\\ ^UNLESS OTHERWISE INDICATED, THE ASSEMBLER ASSUMES VALUES ARE
GIVEN IN DECIMAL.
.LM 8;.TS 13,41,53;.UC;.NF;.PG
^&ARG	ALLOWABLE PARAMS	DEFAULTS	ASPECT\&\\
.S
^B^I^N	(ID,LOC,LNTH,RDX,LZS,SGN)	(0,16,0,16)	^BINARY CODE
		(1,22,0,16)
		(2,28,0,16)
		(3,34,0,16)
.S
^S^E^Q	(LOC,LNTH,RDX)	(3,4,10.)	^STATEMENT SEQUENCE _#
^L^O^C	(LOC,LNTH,RDX)	(10,4,16)	^PROGRAM COUNTER
^S^R^C	(LOC,QUE)	(41)	^SOURCE
^C^O^M	(LOC)	(0)	COMMENTS
			(0 INDICATES TO LEAVE
			COMMENTS AS THEY ARE)
.BR;.LM 12;.RM 62;.S;.F
^NOTE: IF THE COMBINATION ^^.NLIST#OCT,BYT\\ AND ^^.LIST#MEB\\
IS IN EFFECT, THE ASSEMBLER WILL PACK THE EXPANDED MACRO
BINARY TO THE SAME LINE AS THE MACRO CALL.
.BR;.TS ;.LM 6;.RM 74;.P -6
^&5.5.2#^^.ENABL AND .DSABL DIRECTIVES\&\\
.S
.X ^^ENABL\\,DIRECTIVE
.X ^^DSABL\\,DIRECTIVE
.IF D
.X ^^AMA,ENABL/DSABL\\ DIRECTIVE
^PLEASE REVISE THE SECTION REGARDING ^^.ENABL#AMA\\ TO READ AS FOLLOWS:
.EC;.LM 14;.TS 14;.P -7
.IF D
^^AMA\\	^ENABLING OF THIS FUNCTION DIRECTS THE ASSEMBLER TO
 RESOLVE THE ADDRESS MODE OF AN INSTRUCTION BY THE VALUE THE EXPRESSION USED
 AS THE OPERAND TO THE INSTRUCTION.  ^ONE BYTE OF ADDRESS IS ALLOCATED WHERE
 POSSIBLE OTHERWISE 2 BYTES ARE ALLOCATED.  ^TWO BYTES ARE ALWAYS
 ALLOCATED WHERE THE VALUE OF THE OPERAND IS UNDEFINED, GLOBAL, RELOCATABLE 
(EXCEPT IF ^^.BSECT\\) OR HAS ANY ERRORS ASSOCIATED WITH IT.
.P
.EC
^PLEASE APPEND THE FOLLOWING TO SECTION 5.5.2:
.P
.X ^^M68,ENABL/DSABL\\ DIRECTIVE
^^M68\\	^ENABLING OF THIS FUNCTION DIRECTS THE ASSEMBLER TO STORE
'WORD' QUANTITIES INTO THE OBJECT CODE 'MOST SIGNIFICANT BYTE' FIRST
FOLLOWED BY 'LEAST SIGNIFICANT BYTE' (^MOTOROLA ^M6800 MICROPROCESSOR
STYLE). ^NOTE THAT RELOCATION OF THE 'WORD' QUANTITIES IS STILL
DONE PROPERLY AND THAT ^&^^ALL\&\\ 'WORD' QUANTITIES ARE AFFECTED BY THE
ENABLING OF THIS CONTROL UNTIL IT IS ^^DSABL\\ED.
.IF A
 ^THE DEFAULT IS ^^.DSABL#M68\\.
.EC;.IF E
^THE DEFAULT IS ^^.ENABL#M68.\\
.EC
.X ^^USD, ENABL/DSABL\\ DIRECTIVE
.P
^^USD\\	^ENABLING OF THIS (&^UN&^SIGNED&^DIVIDE) PROHIBITS THE ASSEMBLER FROM
DOING SIGN CORRECTIONS ON DIVISIONS.  ^THE DEFAULT
IS ^^.DSABL USD\\.
.IF C;.P
^^WRN\\	^ENABLING OF THIS FUNCTION INSTRUCTS THE ASSEMBLER TO FLAG, WITH
A '^W' MESSAGE, STATEMENTS USING THE OFFSET INDEXED ADDRESS MODE WHERE THE
OFFSET EXPRESSION CONTAINS A FORWARD REFERENCE AND THE FINAL VALUE WILL
FIT IN 8 BITS OR LESS. (^THE ASSEMBLER WILL ALWAYS ALLOW 16 BITS FOR OFFSETS
WHEN THERE ARE FORWARD REFERENCES.) ^THE DEFAULT IS ^^.DSABL#WRN\\.
.F;.LM 6;.TS 10,18,26,34,42,50;.PG;.P -6
.X ^^ECREF\\,CREF ENABLE
.X ^^DCREF\\,CREF DISABLE
^&^^5.5.2.1#.ECREF#AND#.DCREF#DIRECTIVES\&\\
.S
^ALL USER DEFINED SYMBOLS WHOSE FIRST 3 CHARACTERS ARE PERIODS (...) ARE
ALWAYS EXCLUDED FROM THE CROSS REFERENCE.
.S
^THE CROSS REFERENCE FEATURE MAY SELECTIVELY BE ENABLED AND DISABLED BY
 THE ^^.ECREF\\ AND ^^.DCREF\\ DIRECTIVES RESPECTIVELY.
^THE FORM OF THESE STATEMENTS IS AS FOLLOWS:
.TP 4;.S 1
^^.ECREF\\ ARG1,ARG2,...,ARGN
.BR
^^.DCREF\\ ARG1,ARG2,...,ARGN
.S
WHERE ARG1...ARGN IS ONE OF THE LEGAL CHARACTERS DEFINED BELOW:
.S 1;.NF
^C - CROSS REFERENCE OF ^^.CSECTS,.ASECTS\\ AND ^^.BSECTS\\
^E - CROSS REFERENCE OF ERRORS
^M - CROSS REFERENCE OF MACRO SYMBOLS
^P - CROSS REFERENCE OF PERMANENT SYMBOLS
^S - CROSS REFERENCE OF USER DEFINED SYMBOLS
NULL - EQUIVALENT TO ^^C,E,M,S\\
.S 1;.F;.LM 12;.RM 60
^^NOTE:\\ ^ONLY THOSE FUNCTIONS ENABLED AT ^^CSI\\ TIME ARE AFFECTED BY THESE
 STATEMENTS.  ^I.E. A ^^.ECREF\\ WILL NOT
 'TURN ON' CREF IF A /^C WAS NOT ENTERED AT ^^CSI\\.
.BR;.LM 6;.RM 74;.P
^&^^5.5.2.2#.INCLUDE#DIRECTIVES\&\\
.BR
.X ^^INCLUDE\\,DIRECTIVE
^THE ^^.INCLUDE\\ DIRECTIVE IS USED TO 
FORCE THE ASSEMBLER TO 'INCLUDE' FOR ASSEMBLY THE FILE WHOSE NAME 
IS GIVEN AS THE OPERAND TO THE DIRECTIVE.  ^THE ASSEMBLY OF THE FILE 
INDICATED COMMENCES IMMEDIATELY AND THE FIRST LINE OF ASSEMBLED CODE 
FROM THE NEW FILE WILL APPEAR ON THE LINE
 FOLLOWING THE ^^.INCLUDE\\ DIRECTIVE.  ^THE FORMAT FOR THIS DIRECTIVE 
IS AS FOLLOWS:
.S;.NF
^^.INCLUDE\\ DVC:FLENME.EXT	;COMMENTS
.S;.F
WHERE ^&DVC:\& IS ANY ^^RT-11\\ STANDARD DEVICE DESCRIPTOR AND 
^&FLENME.EXT\& IS ANY ^^RT-11\\ TYPE FILE NAME.
 ^IF THE ^&.EXT\& IS OMITTED THEN
.UC;.IF A
M65
.EC;.IF B
M68
.EC;.IF C
M69
.EC;.LC
IS ASSUMED.
.S 2;.LM 12;.RM 60
^^NOTE: IT IS RECOMMENDED THAT THE ^&\\DVC:\&^^ DESCRIPTOR ^&ALWAYS\& BE 
OMITTED FROM THE FILE NAME BECAUSE IF A DEVICE IS SPECIFIED THAT IS ILLEGAL OR 
NOT 'READY' TO THE SYSTEM A FATAL MONITOR ERROR WILL OCCUR
 WHICH WILL ABORT THE ASSEMBLY AND IT MAY BE DIFFICULT TO DETERMINE 
THE SOURCE OF THIS ERROR. \\^IF NO DEVICE IS SPECIFIED, THE ASSEMBLER WILL 
AUTOMATICALLY SEARCH THE DIRECTORIES OF ALL THE DISK SYSTEMS 'READY' TO 
^R^T-11 FOR THE FILE SPECIFIED UNTIL EITHER IT IS FOUND OR ALL 
DIRECTORIES HAVE BEEN SEARCHED.  (^THE SEARCH ORDER IS ^^RK0,RK1,DX1,DX0\\). 
 ^IF NO FILE BY THE NAME SUPPLIED IS FOUND AN '^O' ERROR IS GENERATED FOR 
THE STATEMENT.
.S;.LM 6;.RM 74;.P
.X ^^COPY\\,DIRECTIVE
^&^^5.5.2.3#.COPY#DIRECTIVE\&\\
.BR
THE ^^.COPY\\ DIRECTIVE IS USED TO FORCE THE ASSEMBLER TO 'COPY'
TO THE LIST OUTPUT THE CONTENTS OF THE FILE SPECIFIED AS THE OPERAND 
TO THE DIRECTIVE.  ^NO FORMATING IS DONE TO THE DATA IN THE FILE TO BE 
COPIED.  ^THE COPY BEGINS AT THE LINE FOLLOWING THE ^^.COPY\\ DIRECTIVE.
  ^THE FORMAT FOR THIS STATEMENT IS AS FOLLOWS:
.S;.NF
^^.COPY\\ DVC:FLENME.EXT	;COMMENTS
.S;.F
WHERE ^&DVC:\& IS ANY ^^RT-11\\ STANDARD DEVICE DESCRIPTOR AND 
^&FLENME.EXT\& IS ANY ^^RT-11\\ TYPE FILE NAME.  ^NO ^&.EXT\& IS ASSUMED
  IF ONE IS NOT SUPPLIED.
.S
^PLEASE SEE THE NOTE FOLLOWING ^^.INCLUDE\\ DIRECTIVE.
.P
^&^^5.5.2.4#.MACLIB#DIRECTIVE\&\\
.BR
.X ^^MACLIB\\,DIRECTIVE
^THE ^^.MACLIB\\ DIRECTIVE ALTERS THE DEFAULT ^^SYSMAC\\ MACRO
LIBRARY FILE NAME.
^SUBSEQUENT ^^.MCALL\\ DIRECTIVES (SEE SECTION 5.6.8) OBTAIN MACROS FROM
THIS NEW FILE. ^NO FILE SEARCHING IS DONE UNTIL AN ^^.MCALL\\ DIRECTIVE
IS ENCOUNTERED. ^THE FORMAT FOR THIS DIRECTIVE IS AS FOLLOWS:
.S
^^.MACLIB\\ DVC:FLENME.EXT	;COMMENTS
.S
WHERE ^&DVC:\& IS ANY ^R^T-11 DEVICE AND ^&FLENME.EXT\&
IS ANY ^R^T-11 STANDARD FILE NAME. ^THE ^&.EXT\& IS ASSUMED TO BE
.UC;.IF A
M65
.EC;.IF B
M68
.EC;.IF C
M69
.EC;.LC
IF NOT SUPPLIED.
.S
^PLEASE SEE THE NOTE FOLLOWING ^^.INCLUDE\\ DIRECTIVE (SECTION 5.5.2.2)
.P
^&^^5.5.3.5.1#.ASCIN#DIRECTIVE\&\\
.BR
.X ^^ASCIN\\,DIRECTIVE
^THE ^^.ASCIN\\ DIRECTIVE IS EQUIVALENT TO THE ^^.ASCII\\ DIRECTIVE
EXCEPT THAT BIT 7 OF THE LAST BYTE IN THE STRING GETS SET TO '1'. (I.E.
A HEX '80' IS LOGICALLY ^O^R'ED INTO THE LAST BYTE).
.P
^&^^5.5.3.5.2 VCTRS DIRECTIVE\&\\
.BR
.X ^^VCTRS\\,DIRECTIVE
^THE ^^.VCTRS\\ DIRECTIVE AFFORDS THE PROGRAMMER THE CAPABILITY OF
INSERTING A SERIES OF ^^WORDS\\ INTO THE OUTPUT FILE OF THE 
^^LINKER\\ WITHOUT AFFECTING THE ^^SIZE\\ OF ANY OF THE PROGRAM SECTIONS.
 ^THE FORMAT OF THE STATEMENT IS AS FOLLOWS:
.S
^^.VCTRS ADDRSS,LAB1,LAB2,...,LAB\N	;\\COMMENTS
.S
WHERE ^^ADDRSS\\ IS ANY LEGAL SYMBOL THAT HAS PREVIOUSLY BEEN DEFINED
TO AN ABSOLUTE QUANTITY AND
^^LAB1,LAB2,...,LAB\\N ARE ANY LEGAL USER SYMBOLS OR NUMBERS
WHOSE VALUE (^^WORDS\\ ONLY) IS TO BE INSERTED INTO THE OUTPUT FILE.
^NOTE THAT RELOCATION STILL APPLIES TO THE SYMBOLS USED (EXCEPT ^^ADDRSS\\
WHICH MUST BE AN ABSOLUTE QUANTITY). ^THIS STATEMENT DOES NOT AFFECT THE
SIZE PARAMETER OF ANY PROGRAM SECTION AND AS SUCH THE LINKER MAY NOT
ALLOCATE A FILE SIZE LARGE ENOUGH TO ENCOMPASS THE MEMORY REFERENCED
AT ^^ADDRSS\\.
^THE MOST TYPICAL ERROR WOULD BE A ^^?SAV#FIL#ERR?\\ GENERATED BY THE LINKER
WHEN IT TRIED TO 'WRITE' OUTSIDE THE ALLOCATED ^^.SAV\\ FILE. 
 ^THE PROGRAMMER MUST BE AWARE OF THIS AND TAKE THE NECESSARY
STEPS TO AVOID THE PROBLEM. (^THE PROBLEM DOES NOT EXIST FOR ^^.LDA\\ FILES.)
.S
^THE MOST TYPICAL USE FOR THIS DIRECTIVE WOULD BE TO SEE TO IT THAT THE
MICROPROCESSOR INTERRUPT AND RESET VECTORS WERE PROPERLY LOCATED WHEN USING
RELOCATABLE MODULES. ^E.G:
.S;.NF
^^INTVCT=_^H<0F428>	;DEVELOPMENT SYSTEM VECTOR LOCATIONS
^.VCTRS INTVCT,IRQ+2,NMI+4	;PASS ADDRESS TO DEVELOPMENT SYSTEM
^.VCTRS 3FFA,NMI,RESET,IRQ	;FOR ROM/PROM
.S;.F;.LC
 ^THE OPERATION OF
THE ^^.VCTRS\\ DIRECTIVE IS FUNCTIONALLY EQUIVALENT TO THE FOLLOWING:
.S;.NF
^^.ASECT	;PUT THE LOCATION COUNTER INTO THE ASECT
^..TMP=.	;SAVE CURRENT LOCATION
^.=ADDRSS	;SET LOCATION COUNTER
^.WORD LAB1,LAB2,...,LAB\N	;STORE A SERIES OF WORDS
^.=..TMP	;RESTORE LOCATION COUNTER
.BR;.F;.PG;.P
^&^^5.5.4.1#RADIX\&\\
.BR
.X ^^RADIX\\,DIRECTIVE
^PLEASE AMMEND THE FIRST PARAGRAPH OF SECTION 5.5.4.1 TO READ:
.S
^THE PROGRAMMER HAS THE OPTION OF DECLARING THE FOLLOWING RADICIES:
.S;.LM 15
2-16 (BASE 10) INCLUSIVE
.LM 6;.P
^&^^5.5.4.1.1 RADICIES GREATER THAN 10.\&\\
.BR
^THE FIRST 6 LETTERS OF THE ALPHABET ARE USED TO REPRESENT DIGITS OF NUMERIC
VALUE GREATER THAN 9 WHERE ^A REPRESENTS 10; ^B - 11; ^C - 12, ETC. ^THE
ASSEMBLER REQUIRES, HOWEVER, THAT THE FIRST DIGIT OF ANY NUMERIC STRING
BE ONE OF THE ^^ASCII\\ CHARACTERS BETWEEN 0 AND 9 INCLUSIVE IN ORDER TO
DIFFERENTIATE IT FROM A STANDARD USER DEFINED LABEL. ^THIS RULE HOLDS
REGARDLESS OF THE ^^RADIX\\ THAT IS IN EFFECT. ^E.G:
.S;.LM 12;.NF
^^.RADIX 16	;SETS RADIX TO HEXIDECIMAL
^.BYTE 12	;HEX VALUE '12' IS STORED
^.BYTE 5A	;HEX VALUE '5A' IS STORED
^.WORD BABE	;VALUE OF USER SYMBOL 'BABE' IS STORED
^.WORD 0BABE	;HEX VALUE 'BABE' IS STORED
.LM 6;.F;.P
^&^^5.5.4.2 TEMPORARY RADIX CONTROL\&\\
.BR
^PLEASE AMMEND SECTION 5.5.4.2 TO INCLUDE:
.S;.LM 15
_^^HX	(X IS TREATED AS BEING IN RADIX 16)
.S;.LM 6;.F
^NOTE: SEE PRECEEDING SECTION FOR RULES ON SYNTAX OF ^^HEX\\ NUMBERS.
.P
^&^^5.5.7.1 .END DIRECTIVE\&\\
.S
.X ^^END\\,DIRECTIVE
^PLEASE APPEND TO SECTION 5.5.7.1 THE FOLLOWING:
.S
^NOTE: ^^.END\\ DIRECTIVES ARE IGNORED IN FILES THAT HAVE BEEN ^^.INCLUDE\\D
AND ARE INSTEAD FLAGGED WITH A WARNING MESSAGE. ^A WARNING IS NOT CONSIDERED
AN ERROR.
.P
^&^^5.5.9 PROGRAM SECTION DEFINITION DIRECTIVES\&\\
.S
.X ^^BSECT\\,PROGRAM COUNTER DIRECTIVE
^PLEASE AMMEND THE FIRST PARAGRAPH IN SECTION 5.5.9 TO READ:
.S
^THE ASSEMBLER PROVIDES FOR 256(10) PROGRAM SECTIONS: 1 ^ABSOLUTE
SECTION DECLARED BY AN 
.X ^^ASECT\\,PROGRAM COUNTER DIRECTIVE
^^.ASECT\\ DIRECTIVE, 1 UNNAMED RELOCATABLE PROGRAM SECTION DECLARED BY A
.X ^^CSECT\\,PROGRAM COUNTER DIRECTIVE
^^.CSECT\\ DIRECTIVE WITH NO OPERAND AND A TOTAL OF 254(10) OF THE 
COMBINATIONS OF NAMED RELOCATABLE SECTIONS DECLARED BY ^^.CSECT\\#SYMBOL,
 ^^.BSECT\\ AND ^^.BSECT\\#SYMBOL,
WHERE 'SYMBOL' IS ANY LEGAL SYMBOLIC NAME (ONLY THE FIRST 3 CHARACTERS
OF 'SYMBOL' ARE
SIGNIFICANT IN A ^^'.BSECT\\ SYMBOL' DIRECTIVE). ^THE ^^.BSECT\\ DIRECTIVE 
FUNCTIONS
 EXACTLY THE SAME AS THE ^^.CSECT\\ DIRECTIVE EXCEPT THE ^^LINK\\ OF THE
^^.BSECT\\ION(S) START AT LOCATION 0 REGARDLESS OF THE SIZE OF THE ^^.ASECT\\
AND ANY OF THE ^^.CSECT\\'S.
.PG;.P
.X ^^GLOBB\\,DIRECTIVE
^&^^5.5.10.1 GLOBB\&\\
.BR
^^.GLOBB\\ FUNCTIONS EXACTLY THE SAME AS ^^.GLOBL\\ EXCEPT THE SYMBOLS
PASSED AS ARGUMENTS ARE ASSUMED TO BE SYMBOLS REPRESENTING LOCATIONS IN
PAGE 0. ^AS SUCH IF THE ^^.ENABL#AMA\\ FEATURE IS USED, THE ASSEMBLER
WILL ALLOCATE ONLY 1 BYTE OF STORAGE FOR ADDRESSES DECLARED AS ^^.GLOBB\\.
.BR
.X ^^NTYPE\\,DIRECTIVE
.P
^&^^5.6.4 .NARG,.NCHR \A\N\D .NTYPE\&\\
.S
^PLEASE DELETE ALL REFERENCES TO THE ^^.NTYPE\\ DIRECTIVE IN SECTION 5.6.4.
.P
^&^^5.6.5 .ERROR,.PRINT \A\N\D .WARN\\ DIRECTIVES
.S
^THE ^^.PRINT\\ DIRECTIVE IS USED IN MACRO EXPANSIONS TO PLACE INFORMATION
(ALPHA-NUMERIC) ON THE PRINT LINE. ^THE ASSEMBLER QUES THE LINES TO BE PRINTED
DURING MACRO EXPANSIONS THEREFORE ANY NUMBER OF ^^.PRINT\\ DIRECTIVES MAY
BE ISSUED BEFORE A GIVEN LINE IS ACTUALLY PRINTED. ^THE SYNTAX OF THE DIRECTIVE
IS AS FOLLOWS:
.S
LABEL: .^^PRINT\\ EXPR[(PARAMS)]   ;COMMENTS
.S
WHERE 'EXPR' CAN BE ANY LEGAL ASSEMBLER EXPRESSION AND '[]' INDICATES OPTIONAL
DATA. ^IF THE '(PARAMS)' SECTION IS OMITTED FROM THE STATEMENT, THE VALUE
OF 'EXPR' IS PRINTED IN THE DEFAULT PRINT FIELD 0. ^THE FORMAT OF '(PARAMS)'
IS AS FOLLOWS:
.S
(LOCATION,LENGTH,RADIX,LEADZEROSUPP,SIGN)
.S
^ALL ITEMS EXCEPT 'LOCATION' ARE OPTIONAL AND IF NOT SUPPLIED DEFAULT TO 
THE FOLLOWING:
.S
LENGTH = 0  ; USES LENGTH INDICATED BY THE RADIX
.BR
RADIX = 16  ; HEX
.BR
LEADZEROSUPP = 0 ; DON'T SUPPRESS LEADING ZEROES
.BR
SIGN = 0    ;DON'T PREFIX A SIGN
.S
^^NOTE:\\ ^UNLESS INDICATED OTHERWISE, THE ASSEMBLER ASSUMES NUMBERS WITHIN
THE PARANTHESES TO BE DECIMAL.
.S
^THE VALUE 'LOCATION' SHOULD POINT TO THE LEFT MOST CHARACTER OF THE FIELD.
NUMBERS WILL ALWAYS BE RIGHT JUSTIFIED AND ANY HIGH ORDER CHARACTERS THAT
OVERFLOW THE FIELD WIDTH TO THE LEFT ARE TRUNCATED. ^NO ERRORS ARE GENERATED
IN ANY EVENT.
.S
^THE '/' CHARACTER MAY BE PLACED ANYWHERE IN THE 'PARAMS' AS AN ARGUMENT
BY ITSELF TO INDICATE TO START A NEW PRINT LINE.
.S
^^ASCII\\ TEXT MAY BE PLACED ON THE PRINT LINE BY SUPPLYING A LOCATION
FOLLOWED IMMEDIATELY BY THE ^^ASCII\\ TEXT ENCLOSED IN QUOTES (').
.S
^EXAMPLES:
.S;.NF;.TS 25
^^.PRINT\\ EXPR	;^PUTS THE VALUE OF EXPR IN PRINT FIELD 0 IN HEX.

^^.PRINT\\ EXPR(15)	;^PUTS THE VALUE OF EXPR STARTING AT LOCATION 15
	;IN HEX

^^.PRINT\\ EXPR(20,2)	;^PUTS ONLY 2 HEX CHARACTERS OF VALUE OF EXPR
	;STARTING AT LOCATION 20

^^.PRINT\\ EXPR(22,5,10,1)	;^PUTS 5 DECIMAL CHARACTERS OF THE VALUE
	;OF EXPR STARTING AT LOC 22 AND
	;SUPPRESSES LEADING ZEROES

^^.PRINT\\ EXPR(28,6,10,1,1)	;^PUTS 6 DECIMAL CHARACTERS OF THE
	;ABSOLUTE VALUE OF EXPR STARTING AT
	;LOC 28, SUPPRESSES LEADING ZEROES
	;AND PREFIXES A '-' IF THE VALUE
	;IS NEGATIVE.

^^.PRINT\\ EXPR(/,30)	;^PUTS HEX VALUE OF EXPR STARTING AT 30
	;AND FORCES THE LINE TO THE OUTPUT FILE.

^^.PRINT\\ EXPR(9'[^A=',12,3,15']')
	;^PUTS THE ^^ASCII\\ TEXT "[^A=" STARTING
	;AT LOCATION 9, PUTS 3 HEX CHARACTERS OF
	;THE VALUE OF EXPR STARTING AT LOC 12
	;AND PUTS THE ^^ASCII\\ CHARACTER "]"
	;AT LOCATION 15.

^^.PRINT\\ (15'^^THE ONLY WAY TO FLY\\')
	;PUTS ONLY THE ^^ASCII\\ STRING STARTING 
	;AT LOCATION 15.

^^.PRINT\\ (/)	;^FORCES A NEW LINE
.S;.F;.LM 6
^THE ^^.WARN\\ DIRECTIVE IS IDENTICAL TO THE PRINT DIRECTIVE EXCEPT THE 
STATEMENT IS FLAGGED WITH A '^W' MESSAGE.
.P
^&^^5.7 CALLING AND USING
.IF A
MAC65\&\\
.EC;.IF B
MAC68\&\\
.EC;.IF C
MAC69\&\\
.EC;.BR
^PLEASE REPLACE ALL OCCURENCES OF THE WORD ^^MACRO\\ WITH WORD
.IF A
^^MAC65\\
.EC;.IF B
^^MAC68\\
.EC;.IF C
^^MAC69\\
.EC
IN SECTION 5.7. ^ALSO CHANGE THE DEFAULT EXTENSION FOR THE ^^SYSMAC\\
FILE TO
.IF A
^M65.
.EC;.IF B
^M68.
.EC;.IF C
^M69.
.EC
.S
^THE ASSEMBLER
WILL FIRST SEARCH THE DIRECTORY OF THE DEVICE INDICATED IN THE
^^CSI\\ STRING WITH EACH INPUT FILE FOR THE FILENAME INDICATED. ^IF THE FILE
CANNOT BE FOUND THEN IT WILL SEARCH THE DIRECTORIES OF THE DISK
DRIVES ^^DK1,DX1,DX0\\ IN THAT ORDER UNTIL EITHER ALL DIRECTORIES ARE
SEARCHED OR THE FILE IS FOUND.
^IF NO DVC: IS SPECIFIED ON ANY INPUT FILE SPECIFICATION, THE SEARCH SEQUENCE
WILL BE ^^DK0,DK1,DX1,DX0\\ UNTIL EITHER ALL DIRECTORIES HAVE BEEN SEARCHED
OR THE FILE IS FOUND.
.P
^&5.7.1.0 ^^AUTOMATIC OUTPUT FILE ASSIGMENT (/A)\&\\
.BR
.X ^A,COMMAND STRING SWITCH
^THE ASSEMBLER WILL AUTOMATICALLY ALLOCATE THE OUTPUT FILE(S) IF ONE IS NOT SPECIFIED
EXPLICITLY AND A /^A SWITCH IS ENTERED. ^THE ASSEMBLER WILL CONSTRUCT A
DVC:FLENME IDENTICAL TO THE FIRST INPUT FILE SPECIFICATION (NOTE THAT THE
DVC: WILL BE THE ONE THE ASSEMBLER FOUND TO CONTAIN THE INPUT FILE,
NOT NECESSARILY THE SAME AS THE ONE SUPPLIED,IF ANY)
 ONLY WITH A .^^OBJ\\ EXTENSION FOR THE OBJECT FILE. ^THE ASSEMBLER WILL
CONSTRUCT A ^^LIST\\ FILE HAVING THE SAME NAME AS THAT OF THE ^^OBJECT\\
FILE BUT THE DEVICE IS ^^DK1:\\ AND THE EXTENSION IS ^^.LST\\. ^E.G:
.S;.TS 24;.LM 24;.P -18
^^*FILE/A\\	;EXPANDS TO DVC:^^FILE.OBJ,DK1:FILE.LST=\\DVC:^^FILE.
.IF A
M65\\
.EC;.IF B
M68\\
.EC;.IF C
M69\\
.EC
WHERE DVC: IS THE DEVICE ON WHICH ^^FILE\\ WAS FOUND,
NOT NECESSARILY THE DEFAULT DEVICE ^^DK:\\.
.P
.IF A
^^*TEST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK1:TEST.LST=\\DVC:^^FILE.M65\\
.EC;.IF B
^^*TEST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK1:TEST.LST=\\DVC:^^FILE.M68\\
.EC;.IF C
^^*TEST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK1:TEST.LST=\\DVC:^^FILE.M69\\
.EC
SEE ABOVE FOR DESCRIPTION OF DVC:
.P
.IF A
^^*TEST,LIST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK:LIST.LST=\\DVC:^^FILE.M65\\
.EC;.IF B
^^*TEST,LIST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK:LIST.LST=\\DVC:^^FILE.M68\\
.EC;.IF C
^^*TEST,LIST=FILE/A\\	;EXPANDS TO ^^DK:TEST.OBJ,DK:LIST.LST=\\DVC:^^FILE.M69\\
.EC
^NOTE THAT THE /^A IN THIS CASE DID NOTHING.
.BR
.ST ^INDEX
.BR;.ND;.NNM;.PS 60,100;.PG;.LM 6;.RM 90;.PX
                                                  