	.TITLE	LNKOV3 V04-04 RTLINK  
; RT-11 LINKER
;
; DEC-11-ORLLA-E
;
; MAY 16,1974
; EP / ENAHNCED BY JG
;
; COPYRIGHT (C) 1974,1975
;
; DIGITAL EQUIPMENT CORPORATION
; MAYNARD, MASSACHUSETTS 01754
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY
; ON A SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH
; THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE,
; OR ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE
; AVAILABLE TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO
; ONE WHO AGREES TO THESE LICENSE TERMS. TITLE TO AND OWNERSHIP OF THE 
; SOFTWARE SHALL AT ALL TIMES REMAIN IN DIGITAL.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO
; CHANGE WITHOUT NOTICE AND SHOULD NOT BE CONSTRUED
; AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE
; OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
; WHICH IS NOT SUPPLIED BY DIGITAL.

	.PAGE
	.SBTTL	SYMBOLIC CONSTANTS


	R0=%0
	R1=%1
	R2=%2
	R3=%3
	R4=%4
	R5=%5
	SP=%6
	PC=%7


	TAB=	11
	LF=	12
	FF=	14
	CR=	15
	SPAC=	40
	PER=	56


	GSD=	1	;OBJECT MODULE CODES
	TXT=	3
	RLD=	4
	MODEND=	6
	LBR=	7	;LIBRARY MODULE CODE
	LBREND= 10	;LIBRARY END CODE

	BYTBLK=	512.	;BYTE BLOCK SIZE
	BEGIN=	40	;DISPS INTO SYS JOB DATA AREA
	JSTACK=	42	;JOB'S INITIAL STACK POINTER
	JSTATS=	44	;JOB STATUS WORD
	USRLOC=	46	;ADDR OF SWAPPING USR
	HIGH=	50	;HIGHEST LOC USED BY USER
	ERRBYT=	52	;MONITOR ERROR INDICATOR
	MONLOW=	54	;ADDR OF RMON LOWER LIMIT
	RSIZE=	52	;ROOT SIZE OG PROGRAM
	OVSIZE=	54	;SUMS OF THE LARGEST OVERLAY REGIONS
	RELID=	56	;FB IDENTIFIER ADR
	RELBLK=	60	;ADDRESS O REL


	.CSECT=	2	;LINKER SYMBOL TABLE FLAGS
	.OVR=	4


	$DEFIN=	10	;GSD FLAGS
	$RELOC=	40
; OFFSETS INTO ENTRY POINT TABLE
	EPTALO=	30	;EPT ENTRIES ALLOCATED(BYTES)
	LHEND=	44	;REL END OF LBR HEADER


	;OFFSETS INTO OVERLAY SECTION BLOCK
	LEVPTR=	2	;POINTER TO LEVEL BLOCK
	IDNO=	4	;OVERLAY SECTION ID NUMBER
	BASBLK=	6	;BASE BLOCK OF SECTION ON OUTPUT
	SECLEN=	30	;SECTION LENGTH
	NXSPTR=	32	;POINTER TO NEXT SECTION SAME LEVEL

	LVLN=	-8.	;OFFSETS INTO OVERLAY LEVEL BLOCK
	LVLP=	-6
	SECP=	-4


	OVJOB=	1000	;BIT IN JSTATS WORD TO INDICATE
			;AN OVERLAY JOB


	; USEFUL EMT INSTRUCTIONS
	LKEMT=	EMT+20	;LOOKUP EMT
	SSEMT=	EMT+120	;SAVESTATUS EMT
	WEMT=	EMT+240	;WAIT EMT




	.MCALL	..V1..
	..V1..
	.MCALL	.CSISPC,.CSIGEN,.SETTOP,.LOCK,.UNLOCK
	.MCALL	.FETCH,.LOOKUP,.PRINT,.TTYIN,.WAIT,.ENTER
	.MCALL	.CLOSE,.SRESET,.READW,.WRITW,.WRITE
	.MCALL   .REOPEN,.RCTRLO,.QSET,.DATE


	LDA=	0	;TURN ON LDA FEATURE
;	FB=	0	;TURN ON FB


	.NLIST	BEX
	.NLIST	CND
	.SBTTL	MISCELLANEOUS MACRO DEFINITIONS

	.MACRO	ERROR	MSG
	JSR	R0,ERROR
	.ASCIZ	"?'MSG'?"
	.EVEN
	.ENDM

	.MACRO	PRINT	MSG
	JSR	R5,PR00
	.WORD	MSG
	.ENDM

	.MACRO	LERROR	MSG,REG
	.CSECT	CHAR3
	CHARPT=.
	.ASCIZ	"MSG"
	.CSECT	MAIN3
	.IF NB	REG
	MOV	REG,R0
	JSR	R5,LERROR
	.IFF
	JSR	R5,LERROR+2
	.ENDC
	.WORD	CHARPT
	.ENDM

	.MACRO	LERRA	MSG
	.CSECT	CHAR3
	CHARPT=.
	.ASCIZ	"MSG"
	.CSECT	MAIN3
	JSR	R5,LERRA
	.WORD	CHARPT
	.ENDM
	.SBTTL	POST PASS TABLES AND MESSAGES

	.CSECT	DPUR3

DECTBL:
;	.WORD	10000.		;CAN GIVE THE EXTRA DIGIT
;	.WORD	1000.
;	.WORD	100.
	.WORD	10.		;PRINT 2 DIGITS
	.WORD	1
	.WORD	0		;ZERO IS END INDICATOR

	.CSECT	CHAR3

MTITLE:	.ASCII	<CR><LF>/ATARI LINKM   V04-06/
	.ASCII	/     LOAD MAP /
MTITL2:	.ASCII	<CR><LF>
	.BYTE	0
MTITL1:	.ASCII	<CR><LF><LF>/SECTION ADDR    SIZE    /
	.ASCII	/ENTRY   ADDR    ENTRY   ADDR    ENTRY   ADDR/
	.BYTE	CR,LF,0
HLM:	.ASCIZ	<CR><LF>/HIGH LIMIT = /
UGM:	.ASCIZ	<CR><LF><LF>/UNDEFINED GLOBALS:/<CR><LF>
OVSMSG:	.ASCIZ	<CR><LF><LF>/OVERLAY REGION /
OVSMS2:	.ASCIZ	/SEGMENT /
CLTTT:	.BYTE	CR,LF,TAB,TAB,TAB,0
DATTBL:	.ASCIZ	/JAN/
	.ASCIZ	/FEB/
	.ASCIZ	/MAR/
	.ASCIZ	/APR/
	.ASCIZ	/MAY/
	.ASCIZ	/JUN/
	.ASCIZ	/JUL/
	.ASCIZ	/AUG/
	.ASCIZ	/SEP/
	.ASCIZ	/OCT/
	.ASCIZ	/NOV/
	.ASCIZ	/DEC/
	.SBTTL	CLEAN UP AFTER PASS1

	.CSECT	MAIN3

	.GLOBL	POST
	.GLOBL	ASECT,IBUF1,PR00,ODBLK,BOTTOM
	.GLOBL	OVFLG,SECNUM,SYMM20,COLCT,OVSPTR
	.GLOBL	NXTBLK,OVLVL,OVSEC
	.GLOBL	SYMM12,BEGBLK,MODCNT,LOOKUP
	.GLOBL	LERROR,OBUF,EOBUF,LSWIT,ERROR,ABWMAP
	.GLOBL	OVFLG,TXTBLK,OVLV1,TAM,TXTLEN
	.GLOBL	PADDR,OBLK,SEGBAS,SEGBLK,EXPAND,EIBUF1
	.GLOBL	MDBLK,LINBUF
	.GLOBL	OVCOUN,HLRT,HGHLIM,PASS2,LDAPTR
	.GLOBL	CKSUM,RPACK,OCTOUT,LDAOUT
	.GLOBL	DMP0,DMPA,DECODE,STKBLK,CSIPT
	.IF DF FB
	.GLOBL	FBOVL2,RSWIT,FBTXT,RSIZ1,OVSIZ1
	.GLOBL	RELID1,RELERR
	.ENDC
	.GLOBL	CURPC,BSECT,BSCTSW,R50MAP,DCDFLG

POST:
	PRINT	MTITLE		;PRINT LOAD MAP TITLE
	MOV	#LINBUF,R1	;TEXT GOES TO THE LINBUF
	MOV	#ODBLK+6,R3	;GET BINOUT ADDRESS
	TST	-6(R3)		;OUTPUT FILE SPECIFIED ?
	BEQ	25$		;NO
	MOV	SP,DCDFLG
	JSR	PC,DECODE	;UNPACK FILE NAME
1$:	CMPB	#SPAC,-(R1)	;SUPPRESS BLANKS
	BEQ	1$
	INC	R1
	MOVB	#PER,(R1)+	;IND EXTENSION DIVIDER
	MOV	#ODBLK+10.,R3	;IND FNAM EXTENSION ADR
	MOV	SP,DCDFLG	;NO TABS
	JSR	PC,DECODE	;UNPACK THE EXTENSION
	SUB	#3,R1		;BLANK OUT OPTIONAL SIZE
	MOVB	#11,(R1)+	;TAB TO DATE FIELD
	MOVB	#11,(R1)+
25$:	.DATE			;GET CURRENT DATE
	TST	R0		;IS THERE A DATE ?
	BEQ	4$		;NO
	JSR	PC,CDATE	;CONVERT OCTAL DATE SUBR
4$:	CLRB	(R1)		;TERMINATE LINE
	PRINT	LINBUF
	PRINT	MTITL2		;SKIP 1 LINE
	PRINT	MTITL2
	PRINT	CSIPT
	PRINT	MTITL1		;PRINT 2ND HALF OF LOAD MAP
	MOV	BOTTOM,R4	;GET SPECIFIED BOTTOM ADDRESS
	MOV	ASECT,R3
	CMP	R4,-(R3)	;COMPARE TO SIZE OF ASECT
	BHIS	3$
	MOV	@R3,R4		;USE SIZE OF ASECT
	MOV	R4,BOTTOM	;AS BOTTOM ADDRESS
3$:	CLR	R5
	BR	POST6

POST5:	ADD	SYMM20,R3	;CALC PTR TO NEXT NODE
	BIT	#.CSECT,@R3	;NEW CSECT?
	BEQ	POST7		;NO
	ADD	R4,R5		;CALC NEW BASE ADDR
	CMP	-6(R3),(PC)+	;.BSECT?
	.RAD50	/. B/
	BNE	1$		;NOPE
	TST	BSCTSW		;WAS THE LAST THING A BSECT?
	BNE	3$		;YEP.
	MOV	R5,CURPC	;SAVE THE CURRENT BASE
	MOV	SP,BSCTSW	;SIGNAL SAME
3$:	MOV	BSECT,R5	;YES. SET NEW BASE
	ADD	-2(R3),BSECT	;SET LOCATION OF NEXT BSECT
	BR	5$
1$:	TST	BSCTSW		;WAS THE LAST ONE A .BSECT OR .SSECT?
	BEQ	5$		;NO.
	MOV	CURPC,R5	;RESTORE BASE
	CLR	BSCTSW		;AND SIGNAL SAME
5$:	MOV	-(R3),R4	;GET LENGTH OF SECTION
	BEQ	NOPRT		;DONT PRINT ZERO-LEN SECTS
POST6:	MOV	R5,@R3		;STORE BASE ADDR
	PRINT	MTITL2		;SKIP A LINE
	JSR	PC,R50MAP	;GO PRINT RAD50 NAME
	MOV	R5,R0		;SECTION BASE ADDR
	JSR	PC,OCTOUT	;PRINT IN OCTAL
	MOV	R4,R0		;SECTION LENGTH
	JSR	PC,OCTOUT
	MOV	#4,COLCT
	BR	POSTN
NOPRT:	MOV	R5,(R3)+	;DON'T PRINT INFO FROM ZERO-
	BR	POSTN		;LENGTH CSECTS
POST7:	ADD	R5,-(R3)	;CALC ABS ADDRESS OF SYMBOL
	.IF DF FB
	TSTB	RSWIT		;FOREGROUND LINK ?
	BNE	6$		;YES - PRINT ZERO LEN SYMBOLS
	.ENDC
	TST	R4		;ZERO-LENGTH CSECT?
	BEQ	NOPRT
6$:	DEC	COLCT
	BGT	8$
	PRINT	CLTTT		;<CR><LF><TAB><TAB><TAB>
	MOV	#3,COLCT
8$:	JSR	PC,R50MAP	;PRINT RAD50 SYMBOL
	MOV	-2(R3),R0	;ADDR OF SYM
	JSR	PC,OCTOUT
POSTN:	MOV	@R3,R3		;MOVE DOWN LINKED CHAIN
	BIC	#100007,R3	;END?
	BNE	POST5		;NO
	TST	BSCTSW		;IN A .BSECT?
	BEQ	1$		;NOPE
	MOV	CURPC,R5	;YEP. RESTORE R5
	CLR	BSCTSW		;START WITH NO .BSECTS
	BR	2$
1$:	ADD	R4,R5		;COMPUTE HIGH LIMIT
2$:	MOV	R5,R4		;GET A COPY OF HIGH LIMIT
	MOV	#128.,NXTBLK	;INIT IN CASE OF ERROR
	ADD	#511.,R4	;SCOOT UP TO NEXT BLOCK
	BCS	DOUDFS		;ERROR. OVERFLOW ADDRESS FFFF. SET SIZE TO MAX
	ROR	R4
	CLRB	R4
	SWAB	R4
	MOV	R4,NXTBLK	;ALLOCATE SIZE FOR .SAV FILE
	.PAGE
	.SBTTL	FINISH LOAD MAP (UNDEFINES, ETC.)

; DONE OVERLAY PROCESSING, COME HERE TO PRINT UNDEFINES.
	.ENABL	LSB
DOUDFS:	MOV	SYMM12,R0
	MOV	(R0)+,R3	;GET POINTER TO LIST OF 
	CMP	R0,R3		;UNDEFINED SYMBOLS
	BEQ	5$		;THERE ARE NONE
	MOV	R0,-(SP)	;SAVE ADDR OF HEADER BLK
	MOV	#LINBUF,R1
	MOV	#UGM,R0
6$:	MOVB	(R0)+,(R1)+
	BNE	6$
	DEC	R1		;BACK UP 1
8$:	COM	@R3		;RESTORE WORD AT R3
	MOV	-(R3),-(SP)	;GET PTR TO NEXT
	CLR	@R3		;CLEAR ADDR OF CURRENT
	MOV	SP,DCDFLG	;NO TABS
	JSR	PC,DECODE	;PRINT RAD50 SYMBOL
3$:	CMPB	#SPAC,-(R1)	;BLANK SUPPRESS
	BEQ	3$
	INC	R1
	MOVB	#',,(R1)+	;FOLLOW WITH A COMMA
	CMP	R1,#LINBUF+65.	;LINBUF GETTING FULL?
	BLO	4$		;NOPE
	MOVB	#CR,-1(R1)	;REPLACE COMMA WITH CR
	MOVB	#LF,(R1)+	;AND FOLLOW WITH A LINE FEED
	MOVB	#200,(R1)	;TERMINATE
	PRINT	LINBUF		;EMPTY THE BUFFER
	MOV	#LINBUF,R1	;RESET POINTER
	.PRINT	R1
4$:	MOV	(SP)+,R3
	CMP	@SP,R3		;DONE?
	BLO	8$		;NOT YET
	TST	(SP)+
	CMP	#LINBUF,R1	;BUFFER EMPTY?
	BEQ	5$		;YEP
	MOVB	#CR,-1(R1)	;REPLACE COMMA WITH A CR
	MOVB	#LF,(R1)+	;AND FOLLOW WITH A LF
	CLRB	(R1)		;TERMINATE
	PRINT	LINBUF
	.PRINT	#LINBUF
5$:	MOV	#BEGBLK,R3
	MOV	(R3)+,MODCNT
	JSR	PC,LOOKUP
	TST	@R0		;ERROR IF UNDEF TRANS ADDR
	BNE	14$
13$:	LERROR	<TRANSFER ADDRESS UNDEFINED>
	MOV	#1,BEGBLK+8.
	BR	15$
14$:	MOV	-(R0),R0
	ADD	R0,BEGBLK+8.	;CALC TRANSFER ADDRESS
15$:	MOV	#OBUF,R2
12$:	CLR	(R2)+		;CLEAR THE OUTPUT BUFFER
	CMP	R2,#EOBUF
	BLO	12$
	.IF DF	LDA
	TSTB	LSWIT
	BEQ	24$
	JMP	NOOVLY
24$:
	.ENDC
	MOV	#ODBLK,R0	;ADDR OF OUTPUT FILE BLK
	TST	@R0		;BINOUT REQUESTED?
	BEQ	2$		;NO
	.ENTER	0,R0,NXTBLK	;ENTER BINOUT ON CHAN 0
	BCC	30$
	ERROR	<OUTPUT FULL>
30$:	MOV	NXTBLK,R1	;GET FILE SIZE
	DEC	R1		;NORMALISE IT
32$:	.WRITW	0,#OBUF,#256.,R1	;BLANK FILL ENTIRE SAV FILE
	BCC	31$
	ERROR	<BLNK FILL ERR>
31$:	DEC	R1
	BPL	32$
2$:	BISB	#200,@ABWMAP	;MARK BLOCK 0 WRITTEN
	.DSABL	LSB
NOOVLY:	PRINT	TAM		;TRANSFER ADDRESS MSG
	MOV	BEGBLK+8.,R0	;PICK UP TRANS ADDR
	JSR	PC,OCTOUT
	PRINT	HLM		;HIGH LIMIT MSG
	MOV	R5,R0		;BASE OF LAST SECTION
	JSR	PC,OCTOUT
	PRINT	MTITL2
	PRINT	MTITL2		;DOUBLE SPACE
	MOV	R5,HGHLIM
1$:	JMP	PASS2		;CALL PASS2 OVERLAY
	.PAGE
	.SBTTL	DATE CONVERSION SUBROUTINE

;SUBROUTINE TO CONVERT THE OCTAL DATE TO DECIMAL

; INTERFACE REQUIREMENTS:
;	R0 - CONTAINS THE OCTAL DATE FROM A .DATE MACRO
;	R1 - WHERE TO PUT THE CONVERTED DATE
;	R2 - WORK REG. (DESTROYED AT EXIT)

CDATE:	MOV	R0,-(SP)	;SAVE DATE
	ROL	R0		;ISOLATE DAY
	ROL	R0		; IN THE LOW ORDER BITS
	ROL	R0
	SWAB	R0
	BIC	#177740,R0	;MASK
	JSR	PC,DECOUT	;CONVERT # IN R0 TO DECIMAL
	MOVB	#'-,(R1)+	;HYPHENATE
	MOV	(SP),R0		;GET DATE AGAIN
	SWAB	R0
	BIC	#177703,R0	;GET THE MONTH
	ADD	#DATTBL-4,R0	;COMPUTE ADDRES TO MONTH STRING
1$:	MOVB	(R0)+,(R1)+	;MOVE IN MONTH NAME
	BNE	1$
	MOVB	#'-,-1(R1)	;HYPHENATE
	MOV	(SP)+,R0	;GET DATE AGAIN (PURGE STACK)
	BIC	#177740,R0
	ADD	#72.,R0		;SET THE YEAR
	JSR	PC,DECOUT
	RTS	PC
	.PAGE
	.SBTTL	DECIMAL TO ASCII

;AT ENTRY:
;	R0 - VALUE TO BE LISTED
;	R1 - DESTINATION OF ANSWER
;AT EXIT:
;	R0,R2,R3 DESTROYED
;	R1 POINTS TO FIRST BYTE AFTER LISTED STRING

DECOUT:	MOV	#DECTBL,R2	;POINT TO TABBLE OF DIVISORS

;ENTER AT CONVRT WITH ALTERNATE TABLE POINTER IN R2 FOR
; ANOTHER RADIX OR FORMAT.

CONVRT:	MOV	#'0-1,R3	;FORM DIGIT IN R3
1$:	INC	R3
	SUB	(R2),R0		;SUBTRACT DIVISOR
	BPL	1$		;UNTIL REMANIDER IS NEGATIVE
	ADD	(R2)+,R0	;CORRECT THE REMAINDER
	MOVB	R3,(R1)+	;OUTPUT THE DIGIT
	TST	(R2)		;DONE?
	BNE	CONVRT		;NO. DO THE NEXT DIGIT
	RTS	PC
	.END	
                                                                                                                                                                                                                                                                                                                                   