	.TITLE	LNKOV2 V04-03 RTLINK  
; RT-11 LINKER
;
; DEC-11-ORLLA-E
;
; MAY 16, 1974
; EP / ENHANCED BY JG
;
; COPYRIGHT (C) 1974,1975
;
; DIGITAL EQUIPMENT CORPORATION
; MAYNARD, MASSACHUSETTS 01754
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY
; ON A SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH
; THE INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE,
; OR ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE
; AVAILABLE TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO
; ONE WHO AGREES TO THESE LICENSE TERMS. TITLE TO AND OWNERSHIP OF THE
; SOFTWARE SHALL AT ALL TIMES REMAIN IN DIGITAL.
;
; THE INFORMATION IN THIS  SOFTWARE IS SUBJECT TO
; CHANGE WITHOUT NOTICE AND SHOULD NOT BE CONSTRUED
; AS A COMMITMENT BY DIGITAL EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE
; OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
; WHICH IS NOT SUPPLIED BY DIGITAL.
;
	.SBTTL	SYMBOLIC CONSTANTS


	R0=%0
	R1=%1
	R2=%2
	R3=%3
	R4=%4
	R5=%5
	SP=%6
	PC=%7


	TAB=	11
	LF=	12
	FF=	14
	CR=	15
	SPAC=	40
	PER=	56


	GSD=	1	;OBJECT MODULE CODES
	TXT=	3
	RLD=	4
	MODEND=	6
	LBR=	7	;LIBRARY MODULE CODE
	LBREND= 10	;LIBRARY END CODE

	BYTBLK=	512.	;BYTE BLOCK SIZE
	BEGIN=	40	;DISPS INTO SYS JOB DATA AREA
	JSTACK=	42	;JOB'S INITIAL STACK POINTER
	JSTATS=	44	;JOB STATUS WORD
	USRLOC=	46	;ADDR OF SWAPPING USR
	HIGH=	50	;HIGHEST LOC USED BY USER
	ERRBYT=	52	;MONITOR ERROR INDICATOR
	MONLOW=	54	;ADDR OF RMON LOWER LIMIT
	RSIZE=	52	;ROOT SIZE OF PROGRAM
	OVSIZE=	54	;SUMS OF THE LARGEST OVERLAY REGIONS
	RELID=	56	;FB IDENTIFIER ADR
	RELBLK=	60	;ADDRESS OF REL


	.CSECT=	2	;LINKER SYMBOL TABLE FLAGS
	.OVR=	4


	$DEFIN=	10	;GSD FLAGS
	$RELOC=	40
; OFFSETS INTO ENTRY POINT TABLE
	EPTALO=	30	;EPT ENTRIES ALLOCATED(BYTES)
	LHEND=	44	;REL END OF LBR HEADER


	;OFFSETS INTO OVERLAY SECTION BLOCK
	LEVPTR=	2	;POINTER TO LEVEL BLOCK
	IDNO=	4	;OVERLAY SECTION ID NUMBER
	BASBLK=	6	;BASE BLOCK OF SECTION ON OUTPUT
	SECLEN=	30	;SECTION LENGTH
	NXSPTR=	32	;POINTER TO NEXT SECTION SAME LEVEL

	LVLN=	-8.	;OFFSETS INTO OVERLAY LEVEL BLOCK
	LVLP=	-6
	SECP=	-4


	OVJOB=	1000	;BIT IN JSTATS WORD TO INDICATE
			;AN OVERLAY JOB


	; USEFUL EMT INSTRUCTIONS
	LKEMT=	EMT+20	;LOOKUP EMT
	SSEMT=	EMT+120	;SAVESTATUS EMT
	WEMT=	EMT+240	;WAIT EMT




	.MCALL	..V1..
	..V1..
	.MCALL	.CSISPC,.CSIGEN,.SETTOP,.LOCK,.UNLOCK
	.MCALL	.FETCH,.LOOKUP,.PRINT,.TTYIN,.WAIT,.ENTER
	.MCALL	.CLOSE,.SRESET,.READW,.WRITW,.WRITE
	.MCALL   .REOPEN,.RCTRLO,.QSET,.DATE


	LDA=	0	;TURN ON LDA FEATURE
;	FB=	0	;TURN ON FB


	.NLIST	BEX
	.NLIST	CND
	.SBTTL	MISCELLANEOUS MACRO DEFINITIONS

	.MACRO	ERROR	MSG
	JSR	R0,ERROR
	.ASCIZ	"?'MSG'?"
	.EVEN
	.ENDM

	.MACRO	PRINT	MSG
	JSR	R5,PR00
	.WORD	MSG
	.ENDM

	.MACRO	LERROR	MSG,REG
	.CSECT	CHAR2
	CHARPT=.
	.ASCIZ	"MSG"
	.CSECT	MAIN2
	.IF NB	REG
	MOV	REG,R0
	JSR	R5,LERROR
	.IFF
	JSR	R5,LERROR+2
	.ENDC
	.WORD	CHARPT
	.ENDM

	.MACRO	LERRA	MSG
	.CSECT	CHAR2
	CHARPT=.
	.ASCIZ	"MSG"
	.CSECT	MAIN2
	JSR	R5,LERRA
	.WORD	CHARPT
	.ENDM
	.SBTTL	PASS1 TABLES

	.CSECT	CHAR2

LMLFIL:	.RAD50	/SY /		;LIBRARY MODULE LIST (TEMP FIL)
	.RAD50	/LML/		;IN CASE OF OVERFLOW TO DISK
	.RAD50	/TMP/
	.RAD50	/TMP/
	.SBTTL	PASS1 EXEC

	.CSECT	MAIN2

	.GLOBL	PASS1,RESLIB,CLOSE,CURBUF,FILPT1
	.GLOBL	NEWBLK,MODCNT,ISWIT,SYMM12,SKPBLK,INIO
	.GLOBL	TXTBLK,NEWBUF,NEWBF1,ERROR,PAS1.5,CURBLK
	.GLOBL	ONEPT,EPTSER,BUFSWT,FILPT,ASECT
	.GLOBL	LOOKUP,CSECT,SYMM22,SYMM20,ENDOL,OVFLG
	.GLOBL	LERRA,ASWIT,BEGBLK,BYTE,SSWIT,LIBDIR
	.GLOBL	BEGLML,ENDLML,STLML,LMLBLK,ORDLIB,HARDER
	.GLOBL	LIBN3B,LMLSWT,ORLIB1,ADLML1,PA2LML,GETLIB
	.GLOBL	LIBBLK,IBUF1,IBUF2,SSECT

PASS1:
	MOV	FILPT1,R0	;GET 1ST INPUT FILE ADR
	JSR	PC,INIO		;INITIALIZE I/O
PA11:	JSR	PC,NEWBLK	;ENTER HERE TO START NEW FB BLK
	CMP	R0,#LBR		;LIBRARY MODULE ?
	BEQ	LIBRA1
	CMP	R0,#GSD
	BEQ	PA12
3$:	CMP	R0,#MODEND	;END OF OBJ MOD?
	BNE	PA11A		;NO
	INC	MODCNT		;YES, INC COUNT OF MODS
5$:	BITB	#10,ISWIT	;PROC LIB OBJ MOD ?
	BEQ	PA11A		;NO
; END OF CURRENT OBJ. MOD FROM LIBRARY
; CHECK LML FOR MORE LIBRARY OBJ MODULES
	JMP	LIBN3B
; PROCESS PASS1 GSD
PA11A:	JSR	PC,SKPBLK
	BR	PA11
PA12:	MOV	#8.,R0		;ENTER HERE TO START NEW GSD ITEM
	SUB	R0,R2
	MOV	#TXTBLK,R3
	MOV	R3,R1
13$:	CMP	R4,R5
	BLO	14$
	MOV	R0,-(SP)
	JSR	PC,NEWBUF
	MOV	(SP)+,R0
14$:	MOVB	(R4)+,(R1)+
	DEC	R0
	BGT	13$
	MOVB	TXTBLK+5,R0	;TEST FLAGS
	ASL	R0		;TIMES 2
	CMP	R0,#PA1TBE-PA1TBL	;INSIDE TABLE?
	BHIS	15$			;ERROR - BAD GSD CODE
	MOV	PA1TBL(R0),PC	;JUMP TO ROUTINE
15$:	ERROR	<BAD GSD>

	.CSECT	DPUR2
PA1TBL:	.WORD	MODNAM
	.WORD	SECNAM
	.WORD	ISDNAM
	.WORD	TADDR
	.WORD	SYMNAM
	.WORD	PA1NXT		;IGNORED
	.WORD	PA1NXT		;PROG ID (IGNORED)
PA1TBE:
	.CSECT	MAIN2
	.PAGE
; LIBRARY SEARCH ROUTINE
; THIS ROUTINE CHECKS FOR UNDEFINED SYMBOLS.
; IF UNDEFINED SYMBOLS EXIST, THE FOLLOWING IS DONE:
;	(A) THE LIBRARY DIRECTORY IS BROUGHT INTO CORE.
;	(B) THE UNDEFINED SYMBOLS ARE MATCHED WITH A
;	    LIBRARY ENTRY.
;	(C) THE LIBRARY MODULE LIST IS BUILT
;	(D) MORE UNDEFINED SYMBOL RESOLUTION IS ATTEMPTED.
;	(E) AFTER ALL UNDEF. SYMBOLS HAVE BEEN PLACED
; IN THE LML, THE LML IS ORDERED.
;	(F) LIBRARY MODULES ARE BROUGHT INTO CORE
;	ACCORDING TO THE LML.
; OTHERWISE THE LIBRARY FILE IS CLOSED
; AND NO LIBRARY PROCESSING IS PERFORMED.
;INTERFACE REQUIREMENTS:
;	(1) R0,R1,R3 ARE DESTROYED
;	(2) R4 PTS TO FIRST DATA WRD OF NEW BUFFER
;	(3) R5 PTS TO THE END OF THE BUFFER

	.ENABL	LSB
LIBRA1:	MOV	#ONEPT,R2
	CLRB	@R2
	MOV	#PAS1.5,R3
	INCB	@R3		;IND PROCESSING LIBRARIES
	TSTB	@R3		;IN PASS 1.5 ?
	BMI	LIBRAR		;YES
	JMP	LIBEN6		;NO
LIBRAR:	DECB	(R2)+	;IND LIBR I/O
	TSTB	@R2		;MAKE LIBR DIR RES
	BNE	8$		;NO
	JSR	PC,RESLIB
8$:	MOV	SYMM12,R1	;GET PTR TO UNDEF SYMBOL LIST
	JSR	PC,UDFSYM	;CALL UNDEF SYMBOL SUBR
	BCS	LIBEN1		;NO MORE UNDEF SYM IN LIBRARY
	MOV	#ISWIT,R0
	BITB	#10,@R0		;PROC LIB. OBJ. MOD. ?
	BNE	LIBEN2		;YES BRANCH
	MOVB	#10,@R0		;IND LIB FILE TO LINKER
LIBRA2:	TSTB	@R2		;LIBR DIR RES ?
	BNE	9$		;NO
LIBRA3:	MOV	LIBDIR,R4	;GET RES LIBR ADR
	BR	21$
9$:	ADD	#LHEND-8.,R4	;PT TO 1ST EPT ENTRY
19$:	MOV	R4,-(SP)
20$:	MOV	R2,-(SP)
	JSR	PC,EPTSER	;SEARCH FOR SYMBOL MATCH
	MOV	(SP)+,R2
	BCC	4$		;YES - SYMBOL FOUND ?
24$:	CMP	(R1)+,(R1)+	;PT TO BKWD PTR
	JSR	PC,UDFSYM	;CALL UNDEF SYMBOL SUBR
	BCS	LIBEN3		;NO MORE UNDEF SYM IN LIBRARY
35$:	TSTB	@R2		;LIBR DIR RES ?
	BEQ	22$		;YES
	TSTB	BUFSWT		;IN EPT HDR BUFFER ?
	BPL	22$		;YES
	CLR	CURBLK		;IND EPT HDR BLK #
	JSR	PC,NEWBF1	;GET EPT HDR BLK INTO BUFFER
	JSR	PC,NEWBF1
	CLRB	BUFSWT		;RESET BUFFER SWITCH
	TST	(SP)+
21$:	ADD	#LHEND-2,R4	;PT TO 1ST EPT ENTRY
	BR	19$
22$:	MOV	@SP,R4		;PT TO EPT HEAD
	BR	20$
; THE UNDEFINED SYMBOL (FROM LINKER'S UNDEFINED SYMBOL
; LIST) HAS BEEN FOUND AT THE CURRENT ENTRY POINT TABLE
; THE ASSOCIATED MODULE'S ADDRESS AND BLOCK #
; ARE PLACED IN THE LML.

4$:	JSR	PC,LMLBLD	;PLACE MOD ADR IN LML
	BR	24$		;GET NEXT UNDEF SYMBOL

; THE END OF AN OBJECT MODULE HAS BEEN REACHED, AND THERE
; ARE STILL MORE UNDEFINED SYMBOLS TO BE RESOLVED. THERE-
; FORE, THE LIBRARY HEADER AND DIRECTORY MUST BE BROUGHT 
; BACK INTO THE CURRENT BUFFER.
LIBEN2:	TSTB	@R2		;LIBR DIR RES ?
	BEQ	LIBRA3
LIBN2A:	CLR	CURBLK		;IND LIBR HDR BLK #
	JSR	PC,NEWBF1	;GET LIB HDR BLK
	JSR	PC,NEWBF1	;PT BUF PTR TO CORRECT BLK
	BR	21$
	.DSABL	LSB
; END OF LIBRARY SEARCH
; ORDER THE LML AND READ MODULES FROM
; THE LIBRARY
LIBEN3:	TST	(SP)+
	JMP	ORDLIB		;ORDER THE LIBRARY LML
LIBN3B:
; READ LML MODULES FROM LIBRARY
1$:	MOV	#BEGLML,R2
	MOV	@R2,R1		;GET CURRENT LML PTR
	CMP	R1,ENDLML	;END OF LML ?
	BLO	5$		;NO
	MOV	PA2LML,R1	;PT TO BUFFER AREA
	.READW	2,R1,#256.,LMLBLK ;READ LML
	BCC	3$
	JMP	HARDER
3$:	INC	LMLBLK		;IND TO READ NEXT BLK
5$:	MOV	#LIBBLK,R4
	TSTB	SSWIT		;LIB DIR IN CORE ?
	BNE	6$		;NO - NO BLK OPTIMIZATION
	CMP	@R1,@R4		;REQUESTED MOD IN BUF ?
	BEQ	15$		;YES
	BLO	6$		;NO
	MOV	@R1,R0
	DEC	R0
	BEQ	6$		;MOD IMMEDIATELY FOLLOWS EPT
;				/OF 1 BLK (SPECIAL CONSIDERATION)
	CMP	R0,@R4		;REQUESTED MOD IN NEXT BLK ?
	BEQ	18$		;YES
6$:	MOV	(R1)+,@R4	;IND BLK # OF LIBR OBJ MOD
	BMI	LIBEN1		;YES - TERMINATE LIBRARY ?
	JSR	PC,GETLIB	;GET LIBR OBJ MOD
7$:	ADD	(R1)+,R4	;INDEX TO PROPER BYTE IN LIBR BLOCK
	MOV	R1,@R2		;UPDATE LML PTR
	BR	LIBEN8		;PROCESS LIBRARY'S OBJ MOD
15$:	MOV	IBUF1,R4	;PT TO START OF BUFFER
16$:	TST	(R1)+		;PT TO BYTE ADR IN LML
	BR	7$
18$:	MOV	IBUF2,R4	;PT TO START OF 2ND BUFFER
	TST	-(R4)
	BR	16$
; TERMINATE LIBRARY ROUTINE
LIBEN1:	MOV	#BEGLML,R4
	MOV	#STLML,R5
	MOV	#ISWIT,R0
	MOV	#100,R2
	BITB	R2,@R0		;MORE UNDEF'S & NON RES
	BEQ	1$		;LIBR DIRECTORY ? - NO
	BICB	R2,@R0		;RESET ADDITIVE LML SWITCH
	ASL	R2
	BISB	R2,@R0		;SET 2NDARY LML ORDER
	MOV	SYMM12,R1	;GET PTR TO UNDEF SYM LIST
	MOV	#SSWIT,R2
	MOV	@R4,@R5		;SAVE LML PTR
	MOV	R0,-(SP)
	JSR	PC,UDFSYM	;CHECK FOR UDEF SYM
	MOV	(SP)+,R0
	BCC	LIBN2A		;BUILD 2NDARY LML
1$:	CLRB	@R0
	CLR	LIBBLK		;INITIALIZE LIB BLK CTR
	ADD	#2,@R4		;INDEX OVER LIBR END MARK IN LML
	MOV	@R4,@R5		;UPDATE STLML
	CLRB	ONEPT		;RESET  LIBRARY I/O  SWITCH
LIBEN6:	MOV	@CURBUF,R4	;RESET INPUT BUFFER PTR
	.WAIT	3		;QUIET I/O IN PROGRESS
	JSR	PC,CLOSE	;GET NEXT FILE
	JSR	PC,NEWBUF	;READ NEXT FILE
LIBEN8:	JMP	PA11		;CALL PASS1
; ROUTINE TO PLACE THE ADDRESS OF A LIBRARY MODULE
; INTO THE LIBRARY MODULE LIST(LML)
; INTERFACE:
;	R3 - POINTER TO FOUND MODULE NAME IN LIBRARY

LMLBLD:	MOV	R1,-(SP)
	MOV	R2,-(SP)
	MOV	R4,-(SP)
	CMP	(R3)+,(R3)+	;PT TO BLK ADR IN EPT
	MOV	(R3)+,R4	;GET BLK ADR & PT TO BYTE DISP
	BPL	10$		;NO - CLEAR MOD NAME FLAG ?
	BIC	#100000,R4	;CLEAR MOD NAME FLAG
10$:	MOV	BEGLML,R1	;GET LML PTR
	CMP	R1,ENDLML	;END OF LML ?
	BLO	18$

; THE LML HAS OVERFLOWED! A TEMPORARY FILE MUST
; NOW BE CREATED ON DISK TO PROCESS THE USER'S
; LIBRARY REQUESTS. (THE FILE IS CREATED ON
; CHANNEL 2, AND IS TEMPORARY).

	MOV	PA2LML,R1	;PT TO START OF LML
	MOV	#LMLBLK,R2
	TST	@R2		;TEMP FILE CREATED ?
	BNE	14$		;YES
	DECB	LMLSWT		;IND LML IS ON DISK
	.ENTER	2,#LMLFIL,#0	;CREAT TEMP FILE
	BCC	14$		;YES - ENOUGH SPACE ?
	ERROR	<DEV FULL>
14$:	.WRITW	2,R1,#256.,@R2 ;WRITE TO TEMP FILE
	BCC	17$		;NO - OUTPUT ERRORS ?
	JMP	HARDER		;TERMINATE LINK DUE TO I/O ERROR
17$:	INC	@R2		;IND NEXT BLK ADR
; PLACE LIBRARY MODULE ADR IN LML
18$:	MOV	R4,(R1)+	;PLACE BLK ADR IN LML
	MOV	@R3,R4		;GET BYTE DISP ADR
	BIC	#177000,R4	;ISOLATE BYTE DIS
	MOV	R4,(R1)+	;PLACE BYTE ADR IN LML
	DEC	@R1		;SET IN CASE LIBR END
	CLR	2(R1)		;CLEAR NXT WORD IN CASE NO
;				/ENTRIES FROM NXT LIBR
	MOV	R1,BEGLML	;UPDATE LML PTR
	MOV	(SP)+,R4
	MOV	(SP)+,R2
	MOV	(SP)+,R1
	RTS	PC

; ROUTINE TO GET AN UNDEFINED SYMBOL FROM
; THE UNDEFINED SYMBOL TABLE LIST

; INTERFACE:
;	R1 - PTR TO UNDEFINED SYMBOL LIST

; RETURN INTERFACE:
;	R1 - PTR TO NEXT UNDEFINED SYMBOL
;	C BIT = O - R1 PTS TO NEW UNDEF SYMBOL
;	C BIT = 1 - NO MORE UNDEF SYMBOLS FOR THIS LIBRARY

UDFSYM:	MOV	(R1)+,R0	;GET ADR OF UNDEF SYMBOL
	CMP	R1,R0		;UNDEFINED SYMBOL ?
	BEQ	5$		;NO
1$:	MOV	@R1,R1
	COM	R1		;GET REAL PTR
	BIC	#100007,R1	;ISOLATE REL ADR
	ADD	SYMM20,R1	;GET PHYSICAL ADR
	SUB	#6,R1		;POINT TO SYMBOL
	TST	@R1		;END UDF SYMB LIST ?
	BNE	10$		;NO
5$:	SEC			;IND NO MORE UNDEF SYMBOLS
	BR	UDFEND
10$:	CLC			;IND SYMBOL ADR RETURNED
UDFEND:	RTS	PC	;RETURN TO CALLER

	.SBTTL	CONTROL SECTION NAME

SECNAM:	JSR	PC,LOOKUP
	MOV	R0,CSECT
	MOV	@R0,R1
	BEQ	SECENT		;BRANCH IF BRAND NEW SYMBOL
	BLT	SECULK		;BRANCH IF ALREADY IN UNDEF LIST
;AT THIS POINT SYMBOL WAS ALREADY DEFINED, MUST BE CSECT
	BIT	R1,#.CSECT
	BNE	2$
	JMP	SYMDBL		;NOT CSECT SO ERROR
2$:	CMP	-(R0),TXTBLK+6	;COMPARE LENGTHS
	BHIS	PABR		;BRANCH TO PA1NXT
	MOV	TXTBLK+6,@R0	;SAVE NEW LENGTH
	BR	PABR		;BRANCH TO PAINXT

SECULK:	MOV	R1,@-(R0)	;UNLINK FROM UNDEFINED LIST
	COM	R1
	ADD	SYMM22,R1
	MOV	(R0)+,@R1
	CLR	@R0
SECENT:	MOV	R0,R1
	SUB	SYMM20,R1	;CREATE 12 BIT POINTER TO NEW NODE
	BIC	#077770,@ENDOL	;INSURE PTR CLEARED IF LIBR SEARCH
	BIS	R1,@ENDOL	;ENDOL POINTS TO CURRENT END OF LIST
	MOV	R0,ENDOL	;MAKE NEW END OF LIST
	BIS	#.CSECT,@R0	;SET CSECT BIT
	BIS	OVFLG,@R0	;AND OVERLAY BIT IF NECESSARY
	MOV	TXTBLK+6,-(R0)	;LENGTH
	BITB	#10,ISWIT	;IS THIS A LIBR FILE ?
	BEQ	PABR
	JSR	PC,ADDLML	;CHECK FOR LML ADDITION
PABR:	JMP	PA1NXT
	.SBTTL	ROUTINE TO ADD LML ENTRIES

ADDLML:
	TSTB	SSWIT		;LIBR DIR RESIDENT ?
	BEQ	1$		;YES
	BISB	#100,ISWIT	;IND TO ADD TO LML LATER
	BR	ADLML2

1$:	TST	-(R0)		;PT TO SYMBOL
	MOV	R0,R1
	MOV	R2,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	MOV	LIBDIR,R4	;GET RES LIBR DIR ADR ?
5$:	ADD	#LHEND-2,R4	;PT TO 1ST EPT ENTRY
	JSR	PC,EPTSER	;SEARCH FOR SYMBOL IN LIBR DIR
	BCS	ADLML1		;NO - SYMBOL FOUND ?
	MOV	#BEGLML,R2	;PT TO LML
	MOV	@R2,R1
	MOV	R1,-(SP)	;SAVE ORIGINAL LML PTR
6$:	TST	(R1)+		;FIND LAST ENTRY
	BPL	6$		;NO - LAST ENTRY ?
	TST	-(R1)		;BACKSPACE TO END INDICATOR
	MOV	R1,@R2
	JSR	PC,LMLBLD	;PLACE SYMBOL IN LML
	MOV	@SP,(R2)+	;RESTORE ORIG LML PTR
	MOV	(SP)+,@R2
	JSR	PC,ORLIB2	;ORDER LML FROM 2NDARY LEVEL
ADLML1:
	MOV	(SP)+,R5
	MOV	(SP)+,R4
	MOV	(SP)+,R2
ADLML2:
	RTS	PC

	.SBTTL	SECONDARY LML ORDER ROUTINE

ORLIB2:

4$:	MOV	STLML,R1	;PT TO START OF LML
	MOV	R1,BEGLML	;UPDATE LML START ADR
15$:	MOV	(R1)+,R4	;GET BLOCK ADDRESS
	BMI	ORLIBE
	MOV	(R1)+,R5	;GET BYTE ADR
16$:	CMP	R4,(R1)+	;CORRECT ORDER ?
	BEQ	18$		;YES - IDENTICAL MOD CALL ?
	BLO	19$		;YES - CORRECT ORDER ?
17$:	TST	-(R1)
	MOV	R1,R3
	CMP	-(R3),-(R3)	;PT TO OUT OF ORDER ADR
	MOV	(R1)+,(R3)+	;ORDER THE LIBRARY ADR
	MOV	@R1,(R3)+	;EXCHANGE PLACES IN LML
	MOV	R4,(R3)+
	MOV	R5,@R3
	TST	-(R3)
	BR	4$
18$:	CMP	R5,@R1		;MOD APPEAR MORE THAN ONCE IN LML
	BEQ	30$		;YES - DUPLICATE MOD ADR ?
	BHI	17$		;YES - MOD OUT OF ORDER ?
19$:	TST	-(R1)		;
	BR	15$		;MODULE IN CORRECT ORDER
30$:	MOV	R1,R0
	CMP	-(R1),-(R0)	;PT TO NEXT LML ENTRY
	CMP	-(R1),-(R1)	;POSITION TO LML TO OVLY
	MOV	R1,-(SP)	;SAVE SORT ADR
32$:	MOV	(R0)+,(R1)+	;OVLY DUPLICATE MOD ADR
	BPL	32$
	MOV	(SP)+,R1	;RESTORE SORT ADR
	BR	15$		;RECALL SORT
ORLIBE:	RTS	PC		;EXIT

	.SBTTL	GLOBAL SYMBOL

	.GLOBL	LERRF,LERROR

SYMNAM:	JSR	PC,LOOKUP
	BIT	#$DEFIN,TXTBLK+4;DEFINED HERE?
	BEQ	SYMUDF		;NO
	MOV	@R0,R1		;DEFINED BEFORE?
	BEQ	1$		;NOT PRESENT IN TABLE
	BGT	SYMDBL		;MULTIPLY DEFINED SYMBOL
	MOV	R1,@-(R0)	;PRESENT, BUT IN UNDEF LIST
	COM	R1		;SO UNLINK IT
	ADD	SYMM22,R1
	MOV	(R0)+,@R1
	CLR	@R0
1$:	MOV	#OVFLG,R1
	BIS	@R1,@R0		;SET OVERLAY BIT IF NECESSARY
	ADD	(R1)+,@R1	;AND ADD TO OVERLAY COUNT
	MOV	R0,R1
	SUB	SYMM20,R1
	MOV	R1,-(SP)
	MOV	R0,-(SP)
	MOV	TXTBLK+6,-(R0)	;SYMBOL VALUE
	MOV	@R0,-(SP)
	BIT	#$RELOC,TXTBLK+4;ASECT?
	BNE	SYMREL		;NO
	MOV	ASECT,R1
	BR	SYMN2
SECOVR:
SYMDBL:	TST	-(R0)
	MOV	SP,LERRF	;NO CRLF RQD
	LERRA	<MULT DEF OF>	;PRINT SYMBOL ALSO
	MOV	CSECT,R0	;POINT TO .CSECT NAME
	LERROR < IN MODULE: >,MODCNT
	BR	PA1NXT
SYMREL:	MOV	CSECT,R1
SYMN2:	MOV	@R1,R0
	BIC	#100007,R0	;ISOLATE PTR PART
	BEQ	5$
	ADD	SYMM20,R0
	BIT	#.CSECT,@R0
	BNE	4$
	TSTB	ASWIT		;ALPHABETICAL LISTING???
	BNE	3$		;YES
	CMP	-2(R0),@SP	;LARGER ADDRESS?
	BHI	4$
3$:	MOV	R0,R1
	BR	SYMN2
4$:	SUB	SYMM20,R0
	TST	(SP)+
	BIS	R0,@(SP)+	;MOVE POINTER INTO NEW NODE
6$:	BIC	#077770,@R1
	BIS	(SP)+,@R1
	BR	PA1NXT
5$:	TST	(SP)+
	MOV	@SP,ENDOL
	INC	@(SP)+
	BR	6$

;PROCESS UNDEFINED SYMBOL REF
SYMUDF:	TST	@R0
	BNE	PA1NXT
	MOV	SYMM12,R1
	MOV	@R1,-(SP)	;GET PTR TO HEAD OF UDEF LIST
	MOV	R0,@R1
	MOV	#177767,@R0	;POINT TO LIST HEAD
	MOV	R0,R1
	SUB	SYMM20,R1
	COM	R1
	MOV	(SP)+,-(R0)
	MOV	R1,@(R0)+
	BITB	#10,ISWIT	;LIBRARY FILE ?
	BEQ	PA1NXT		;NO
	CMP	-(R0),-(R0)	;CORRECT UDEF SYM PTR
	JSR	PC,ADDLML	;ADD TO LML FROM 2NDARY LEVEL
	BR	PA1NXT

	.SBTTL	TRANSFER ADDRESS BLOCK

TADDR:	MOV	BEGBLK+8.,R0	;CURRENT TRANSFER ADDR
	ASR	R0
	BNE	PA1NXT		;WE ALREADY HAVE ONE
	MOV	#BEGBLK,R1
	MOV	MODCNT,(R1)+	;SAVE MODCNT FOR LOOKUP LATER
	MOV	(R3)+,(R1)+
	MOV	(R3)+,(R1)+
	MOV	(R3)+,(R1)+
	MOV	@R3,@R1
;	BR	PA1NXT
;	FALL THRU
	.SBTTL	FINISH PASS1 GSD ITEM

MODNAM:
ISDNAM:
PA1NXT:	TST	R2
	BLE	1$
	JMP	PA12
1$:	JSR	PC,BYTE		;GET CHECKSUM BYTE
;COULD CHECK THE BLOCK CHECKSUM HERE
	JMP	PA11		;GO BEGIN NEW DATA BLOCK

	.END	
                                                  